# 1. 基础概念
## 1.1 什么是IPC
IPC是Inter-Process Communication的缩写，即为进程间通信。就是指两个进程间交换数据的过程。

## 1.2 什么是进程
进程指一个执行单元，一个进程至少有一个线程，可以包含多个线程，一般一个应用或一个程序就是一个进程。最简单的情况下，一个进程只有一个主线程，在Android里面主线程又称作UI线程。只有在UI线程中才可以更新界面元素.

## 1.3 什么是线程
线程是CPU进行调度的最小单元，它是比进程更小的能独立运行的基本单位，多个线程共享内存，。多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。进程和线程是包含和被包含关系。

## 1.4 线程和进程之间的区别
进程是系统进行资源分配的基本单位，有有独立的内存地址空间，一个进程崩溃并不会影响其它进程。
线程是CPU进行调度的基本单位，有独立的栈，局部变量，寄存器，程序计数器等，因为线程没有独立的内存地址空间，一个线程崩溃会导致整个进程崩溃。
因此多进程的程序会比多线程健壮，但是进程切换的资源消耗太大。而线程因为共享内存地址空间，多线程切换速度很快，比进程效率要高。
> 一个程序至少有一个进程，一个进程至少有一个线程

> 线程的划分粒度小余进程，因此多线程程序并发高

> 进程在执行过程中拥有独立的内存单元，线程共享内存单元

> 线程不能独立执行，必须依存在应用程序中，由应用程序提供多线程执行控制

> 多线程的意义在于一个应用程序中，有多个执行部分可以同时执行，但操作系统并没有将多个线程做为多个独立的应用程序进行进程的调度管理以及资源分配。

> 线程执行开销小，但是不利于资源的管理和保护。

> 进程相反，每个进程运行在独立的内存地址空间中，其资源互不干扰。

## 1.4 多进程


# Android中的IPC
> Binder
> Bundle
> 共享文件
> ContentProvide
> Socket



# Binder
> 直观来说，Binder是Android中的一个类，它继承自IBinder接口。

> IPC方面说，Binder是Android中的一种进程间通讯方式。

> 系统层面说，Binder是一种虚拟的物理设备，它的设备驱动是/dev/binder，这是Android中独有的，Linux中并不包含。

> AndroidFramework方面说，Binder是ServiceManager连接各种Manager(*ActivityManager、WindowManager等等*)和相应的ManagerServcie的桥梁。
> Android应用层方面，Binder是客户端和服务端进行通信的媒介，当binderService的时候，服务端会返回一个包含了服务端业务调用的Binder对象。

Binder主要用于Service中，包括AIDL和Messenger,其中普通的Service中的Binder不涉及进程间通信，因此比较简单。

## linkToDash和unlinkToDeath
