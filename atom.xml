<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexer</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://imrhj.cn/"/>
  <updated>2021-03-31T02:49:29.048Z</updated>
  <id>https://imrhj.cn/</id>
  
  <author>
    <name>Hexer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决 Only fullscreen opaque activities can request orientation</title>
    <link href="https://imrhj.cn/2018/only-fullscreen-opaque-activities-can-request-orientation/"/>
    <id>https://imrhj.cn/2018/only-fullscreen-opaque-activities-can-request-orientation/</id>
    <published>2018-05-25T03:49:36.000Z</published>
    <updated>2021-03-31T02:49:29.048Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/05/25/5b0788dd673ed.png" alt="1527220441406.png"></p><p>这段时间把App的<code>targetSDKVersion</code>升级到了27，昨晚上线之后今早看到后台一堆崩溃，全是 Android 8.0 的设备，因为手头设备有限，测试的时候只测了Android 8.1的设备，没想到还有一个这个坑埋在这里，记录一下处理办法。</p><a id="more"></a><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>当<code>targetSDKVersion</code>为26或者27时，在 Android 8.0 的设备上，一些设置了<code>windowIsTranslucent</code>标志，将背景设为透明，同事将屏幕方向锁定的<code>Activity</code>，会崩溃并抛出这个异常:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.IllegalStateException: Only fullscreen opaque activities can request orientation</span><br><span class="line">       at android.app.Activity.onCreate(Activity.java:1007)</span><br><span class="line">       at android.support.v4.app.SupportActivity.onCreate(SupportActivity.java:66)</span><br><span class="line">       at android.support.v4.app.FragmentActivity.onCreate(FragmentActivity.java:321)</span><br><span class="line">       at android.support.v7.app.AppCompatActivity.onCreate(AppCompatActivity.java:84)</span><br><span class="line">       at ...</span><br></pre></td></tr></table></figure><p>这个问题网上有很多讨论以及解决方法，问题的原因出自<a href="https://github.com/aosp-mirror/platform_frameworks_base/commit/39791594560b2326625b663ed6796882900c220f#diff-960c6fdd4a4b336d98b785268b2a78ffR2183" target="_blank" rel="noopener">这里</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ActivityInfo.isFixedOrientation(requestedOrientation) &amp;&amp; !fullscreen </span><br><span class="line">&amp;&amp; appInfo.targetSdkVersion &gt;= O) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Only fullscreen activities can request orientation"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里做了当屏幕方向锁定了并且不为全屏并且 App 的<code>targetSdkVersion</code> 大于 <code>Android O</code>的话，就会抛出这个异常。</p><p>是否为全屏的判定如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isTranslucentOrFloating</span><span class="params">(TypedArray attributes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> isTranslucent = attributes.getBoolean(</span><br><span class="line">com.android.internal.R.styleable.Window_windowIsTranslucent, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> isSwipeToDismiss = </span><br><span class="line">        !attributes.hasValue(com.android.internal.R.styleable.Window_windowIsTranslucent) </span><br><span class="line">&amp;&amp; attributes.getBoolean(com.android.internal.R.styleable.Window_windowSwipeToDismiss, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> isFloating = </span><br><span class="line">        attributes.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">return</span> isFloating || isTranslucent || isSwipeToDismiss;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手头的 Android 8.1 的机器并没有触发这个问题，是因为这个问题在 8.1 里已经<a href="https://github.com/aosp-mirror/platform_frameworks_base/commit/a4ceea026d6373e9be4b1daf3aa4ed93de4157cf#diff-960c6fdd4a4b336d98b785268b2a78ffL2197" target="_blank" rel="noopener">修复</a>了。</p><p><img src="https://i.loli.net/2018/05/25/5b07ac68bcb4a.png" alt="1527229499937.png"></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>解决方法有如下几种:</p><ol><li><p>降级<code>targetSDKVersion</code>到26以下 <del>(废话！！)</del></p></li><li><p>移除<code>mainfest</code>文件里的<code>screenOrientation</code>属性</p></li><li><p>取消Activity主题里的<code>windowIsTranslucent</code>属性或者<code>windowSwipeToDismiss</code>属性或者<code>windowIsFloating</code>属性（根据你设置了什么属性来具体分析）</p></li><li><p>（推荐）移除<code>manifest</code>文件里的<code>screenOrientation</code>属性，并在<code>Activity</code>的<code>onCreate</code>方法里设置屏幕方向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT != Build.VERSION_CODES.O) &#123;</span><br><span class="line">setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      Only fullscreen opaque activities can request orientation Android O 引入的BUG
    
    </summary>
    
      <category term="技术" scheme="https://imrhj.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://imrhj.cn/tags/Android/"/>
    
      <category term="Java" scheme="https://imrhj.cn/tags/Java/"/>
    
      <category term="Android O" scheme="https://imrhj.cn/tags/Android-O/"/>
    
      <category term="BUG!!" scheme="https://imrhj.cn/tags/BUG/"/>
    
  </entry>
  
  <entry>
    <title>Android O 隐式广播的变更</title>
    <link href="https://imrhj.cn/2018/android-o-broadcast-receiver/"/>
    <id>https://imrhj.cn/2018/android-o-broadcast-receiver/</id>
    <published>2018-05-15T07:49:06.000Z</published>
    <updated>2021-03-31T02:49:29.044Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/05/15/5afaacd581c22.png" alt="android-o-hero.1913b82c89274bfa9e3072ee0f1add4d.png"></p><p>今天来说一下 Android O 中对于隐式广播的变更，完整的变更在<a href="https://developer.android.com/about/versions/oreo/android-8.0-changes" target="_blank" rel="noopener"><strong>这里</strong></a>可以看到。</p><a id="more"></a><p>在 Android N 中，Google移除了三项隐式广播<code>(CONNECTIVITY_ACTION, ACTION_NEW_PICTURE, ACTION_NEW_VIDEO)</code>，而 Android O 中砍的更多，除了<a href="https://developer.android.com/guide/components/broadcast-exceptions" target="_blank" rel="noopener"><strong>这里</strong></a>列出来的，其余的都被移除了。</p><p>除了移除一些广播之外，Android O 进行了更为严格的广播监听限制，<a href="https://developer.android.com/about/versions/oreo/background#broadcasts" target="_blank" rel="noopener"><strong>这里</strong></a>可以看到具体的限制措施，总得来说静态注册的隐式广播接收器基本上都失效了，动态注册的不受影响，但是 App 被杀掉之后就无法生效了。官方推荐使用 <a href="https://developer.android.com/reference/android/app/job/JobScheduler.html" target="_blank" rel="noopener"><strong>JobScheduler</strong></a> 来完成之前依赖隐私广播完成的操作。</p><p>并且除了这些由系统发出的隐式广播之外，由自己的应用自行发出的隐式广播也也无法被静态注册的广播接收器接收到。因此针对自己发出自己接收的隐式广播，成本最低的迁移方法是改为显式广播，只需要添加包名即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"cn.imrhj.test_action"</span>);</span><br><span class="line">intent.setPackage(getPackageName());</span><br><span class="line">sendBroadcast(intent);</span><br></pre></td></tr></table></figure><p>另一种方式是动态注册广播接收器，在一个运行中的 Activity 或者 Service 中进行动态注册即可。根据不同的场景自行选择。</p><p>如果你依赖某个隐式广播来唤醒 App 执行任务，那么你可能需要考虑使用 <strong>JobScheduler</strong> 了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Component service = <span class="keyword">new</span> ComponentName(<span class="keyword">this</span>,TestService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">JobInfo info = <span class="keyword">new</span> JobInfo.Builder(service)</span><br><span class="line">                  .setRequiresCharging(<span class="keyword">true</span>)  <span class="comment">// 是否充电</span></span><br><span class="line">                  .setRequiredNetworkType(JobInfo.NETWORK_TYPE_ANY) <span class="comment">// 网络类型</span></span><br><span class="line">                  .setPersisted(<span class="keyword">true</span>) <span class="comment">// 设备重启后是否继续</span></span><br><span class="line">                  .build();</span><br><span class="line">JobScheduler jobScheduler = (JobScheduler) getSystemService(Context.JOB_SCHEDULER_SERVICE);</span><br><span class="line">jobScheduler.schedule(info);</span><br></pre></td></tr></table></figure><p>JobScheduler 只支持 Android Lollipop 及以上的 Android 版本，因此如果你的项目 minSdkVersion 小于21,则需要考虑使用 <a href="https://github.com/evernote/android-job" target="_blank" rel="noopener">Android-Job</a> 这个第三方库，它能根据系统版本自动选择使用<code>JobScheduler</code>, <code>GcmNetworkManager</code> 或者 <code>AlarmManager</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/05/15/5afaacd581c22.png&quot; alt=&quot;android-o-hero.1913b82c89274bfa9e3072ee0f1add4d.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天来说一下 Android O 中对于隐式广播的变更，完整的变更在&lt;a href=&quot;https://developer.android.com/about/versions/oreo/android-8.0-changes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;这里&lt;/strong&gt;&lt;/a&gt;可以看到。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://imrhj.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://imrhj.cn/tags/Android/"/>
    
      <category term="BroadcastReceiver" scheme="https://imrhj.cn/tags/BroadcastReceiver/"/>
    
  </entry>
  
  <entry>
    <title>在Android O中获取BuildProperties文件信息</title>
    <link href="https://imrhj.cn/2018/build-properties-on-android-o/"/>
    <id>https://imrhj.cn/2018/build-properties-on-android-o/</id>
    <published>2018-05-09T09:17:38.000Z</published>
    <updated>2021-03-31T02:49:29.044Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-起因"><a href="#0x00-起因" class="headerlink" title="0x00 起因"></a>0x00 起因</h1><p>升级App的 <code>targetSdkVersion</code>至27之后，发现原有的一个获取 Android 系统 <code>BuildProperties</code>信息的类无法正常工作了，初始化时会抛出异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.io.FileNotFoundException: /system/build.prop (Permission denied)</span><br><span class="line">        at java.io.FileInputStream.open0(Native Method)</span><br><span class="line">        at java.io.FileInputStream.open(FileInputStream.java:200)</span><br><span class="line">        at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:150)</span><br><span class="line">        at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:103)</span><br><span class="line">        at java.io.FileReader.&lt;init&gt;(FileReader.java:58)</span><br></pre></td></tr></table></figure><p>在初始化<code>BuildProperties</code>时，会去读取<code>/system/build.prop</code>的文件信息，相关代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">BuildProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mProperties = <span class="keyword">new</span> Properties();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        mProperties.load(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(Environment.getRootDirectory(), <span class="string">"build.prop"</span>)));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为在 Android O 开始，<code>/system/build.prop</code>的读取权限不再对非root用户开放，通过查看文件权限可以确认这个问题</p><ul><li>Android 8.1手机</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> adb shell ls -l /system/build.prop</span><br><span class="line">-rw-------  1 root root      4699 2009-01-01 08:00 build.prop</span><br></pre></td></tr></table></figure><p>可以看到<code>build.props</code>的文件权限变成了600</p><ul><li>Android 6.0手机</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> adb shell ls -l /system/build.prop</span><br><span class="line">-rw-r--r-- root     root         9018 2017-12-16 01:51 build.prop</span><br></pre></td></tr></table></figure><p>此时的文件权限是644，非root用户也有读取权限。</p><p>所以这段代码之前可以正常工作，在Android O上就会抛异常。</p><h1 id="0x01-解决方法"><a href="#0x01-解决方法" class="headerlink" title="0x01 解决方法"></a>0x01 解决方法</h1><h2 id="1-getprop"><a href="#1-getprop" class="headerlink" title="1. getprop"></a>1. getprop</h2><p>通过<code>adb shell</code>命令进入到Android手机的shell环境中，可以执行内置的命令getprop，这条命令返回的是Android property的一个合计，其相关说明为<code>get property via the android property service</code>，这些属性从多个文件中加载，包括<code>/system/build.prop</code>、<code>/default.prop</code>，因此可以在代码中调用这条命令以此获取。</p><p>这样做有两个问题: 1是比直接读取<code>/system/build.prop</code>文件会多几个属性，因为getprop命令里还包含了<code>default.prop</code>文件中的信息，这个问题不大。2是终端输出的信息是形如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[sys.lineage_settings_system_version]: [3]</span><br><span class="line">[sys.logbootcomplete]: [1]</span><br><span class="line">[sys.oem_unlock_allowed]: [1]</span><br><span class="line">[sys.rescue_boot_count]: [1]</span><br><span class="line">[sys.retaildemo.enabled]: [0]</span><br><span class="line">[sys.sysctl.extra_free_kbytes]: [43200]</span><br></pre></td></tr></table></figure><p>这样的信息，与直接读取文件相比，key 和 value 上被包裹了中括号，因此需要使用正则对结果进行处理之后才能使用。</p><p>相关代码如下:<del>不完整</del></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BuildProperties <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> InstanceHolder.mInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Properties mProperties;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Pattern regex = Pattern.compile(<span class="string">"\\[(.+)]: \\[(.+)]"</span>);</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">BuildProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mProperties = <span class="keyword">new</span> Properties();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Process p = Runtime.getRuntime().exec(<span class="string">"getprop"</span>);</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(p.getInputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = in.readLine()) != <span class="keyword">null</span> &amp;&amp; !line.equals(<span class="string">"null"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.parseLine(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseLine</span><span class="params">(String line)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtil.isNotBlank(line)) &#123;</span><br><span class="line">        Matcher m = regex.matcher(line);</span><br><span class="line">        <span class="keyword">if</span> (m.find()) &#123;</span><br><span class="line">            mProperties.setProperty(m.group(<span class="number">1</span>), m.group(<span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-通过反射调用-SystemProperties-进行获取"><a href="#2-通过反射调用-SystemProperties-进行获取" class="headerlink" title="2. 通过反射调用 SystemProperties 进行获取"></a>2. 通过反射调用 SystemProperties 进行获取</h2><p>Android系统源码中大量使用了<code>android.os.SystemProperties</code>进行系统属性的获取与设置，我们可以通过反射来获取这个类进行调用。</p><p>相关代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemProperty</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SystemProperty</span><span class="params">(Context mContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mContext = mContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrThrow</span><span class="params">(String key)</span> <span class="keyword">throws</span> NoSuchPropertyException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClassLoader classLoader = mContext.getClassLoader();</span><br><span class="line">            Class SystemProperties = classLoader.loadClass(<span class="string">"android.os.SystemProperties"</span>);</span><br><span class="line">            Method methodGet = SystemProperties.getMethod(<span class="string">"get"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">return</span> (String) methodGet.invoke(SystemProperties, key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchPropertyException(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchPropertyException(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchPropertyException(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchPropertyException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getOrThrow(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchPropertyException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码来自项目<a href="https://github.com/thuxnder/android-getprop" target="_blank" rel="noopener">android-getprop</a></p>]]></content>
    
    <summary type="html">
    
      在Android O中获取BuildProperties文件信息
    
    </summary>
    
      <category term="技术" scheme="https://imrhj.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://imrhj.cn/tags/Android/"/>
    
      <category term="BuildProperties" scheme="https://imrhj.cn/tags/BuildProperties/"/>
    
      <category term="adb" scheme="https://imrhj.cn/tags/adb/"/>
    
      <category term="Android O" scheme="https://imrhj.cn/tags/Android-O/"/>
    
  </entry>
  
  <entry>
    <title>Android TextInputLayout 使用时的坑</title>
    <link href="https://imrhj.cn/2017/android-textinputlayout-error/"/>
    <id>https://imrhj.cn/2017/android-textinputlayout-error/</id>
    <published>2017-12-13T02:24:36.000Z</published>
    <updated>2021-03-31T02:49:29.044Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/06/14/5d035bf328e3d88029.png" alt="1560501234327.png"><br>在使用 <code>TextInputLayout</code> 编写一个登录界面时，发现一个深坑，记录下来。<br>简单的布局文件如下所示<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.TextInputLayout</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_marginEnd</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_marginStart</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_marginTop</span>=<span class="string">"20dp"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">EditText</span>  <span class="attr">android:id</span>=<span class="string">"@+id/etMail"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:hint</span>=<span class="string">"@string/mail"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:imeOptions</span>=<span class="string">"actionNext"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:inputType</span>=<span class="string">"textEmailAddress"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:lines</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:singleLine</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:textColor</span>=<span class="string">"@android:color/white"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:textSize</span>=<span class="string">"14sp"</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.TextInputLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然而，此时 <code>TextInputLayout</code> 的未激活状态下hint的文字颜色为黑色，无法调整，查找<a href="https://stackoverflow.com/questions/30546430/how-to-change-the-floating-label-color-of-textinputlayout" target="_blank" rel="noopener">资料</a>得知，需要在style里添加一个theme，并复写<code>textColorHint</code>属性，如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"TextLabel"</span> <span class="attr">parent</span>=<span class="string">"TextAppearance.AppCompat"</span>&gt;</span></span><br><span class="line"><span class="xml">   <span class="comment">&lt;!-- Hint color and label color in FALSE state --&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColorHint"</span>&gt;</span>@color/Color Name<span class="tag">&lt;/<span class="name">item</span>&gt;</span> </span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>20sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="comment">&lt;!-- Label color in TRUE state and bar color FALSE and TRUE State --&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/Color Name<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorControlNormal"</span>&gt;</span>@color/Color Name<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorControlActivated"</span>&gt;</span>@color/Color Name<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后将该theme添加到<code>TextInputLayout</code>中，然而我这样做之后，颜色样式确实改变了，但是在尝试添加error提示的时候崩溃了，<br>报错<code>java.lang.UnsupportedOperationException: Failed to resolve attribute at index 4: TypedValue{t=0x2/d=0x1010099 a=1}</code>。<br>Google一番找到的解决方案对我无效。<br>猜测是Android Design库升级之后部分行为发生了变更。<br>尝试更换<code>TextLabel</code> Theme 的 parent 主题为Material包下的主题，失败。<br>搜索之后，发现正确应该继承<code>Widget.Design.TextInputLayout</code>。之后一切表现正常<br>完整Theme主题如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"TextLabel"</span> <span class="attr">parent</span>=<span class="string">"Widget.Design.TextInputLayout"</span> &gt;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColorHint"</span>&gt;</span>@color/colorWhite5<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>14sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorRedAccept<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:colorControlNormal"</span>&gt;</span>@color/colorWhite3<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:colorControlActivated"</span>&gt;</span>@color/colorRedText<span class="tag">&lt;/<span class="name">item</span>&gt;</span> </span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/06/14/5d035bf328e3d88029.png&quot; alt=&quot;1560501234327.png&quot;&gt;&lt;br&gt;在使用 &lt;code&gt;TextInputLayout&lt;/code&gt; 编写一个登录界面时，发现
      
    
    </summary>
    
      <category term="技术" scheme="https://imrhj.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://imrhj.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>在闲置笔记本上安装ESXi的坑</title>
    <link href="https://imrhj.cn/2017/esxi-for-samsung-noteboot/"/>
    <id>https://imrhj.cn/2017/esxi-for-samsung-noteboot/</id>
    <published>2017-11-25T07:36:41.000Z</published>
    <updated>2021-03-31T02:49:29.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h1><p>大学时用的笔记本是爆炸星的<strong>370R5E</strong>,3代i3的处理器，显卡 8750m，性能还不错~在寝室的时候就靠它打游戏了。不过从工作了之后（事实上从大三常年泡在学校网络中心之后），这台本子基本处于闲置状态，前段时间突发奇想，把它拎出来装了个群晖当做NAS <del>(其实只是用来备份MBP)</del>，结果才发现免费撸的K2 LAN 口都是百兆的。百兆的局域网备份。。我还不如用移动硬盘呢。再加上K2上跑了一堆东西，性能已经是不太够了，趁着换掉它。于是入了洋垃圾<strong>R6300V2</strong>。</p><p>咳，说了一堆目前跟文章没什么关联，前段时间双十一忽悠基友上车买了PS4 slim，这段时间一直跟他开黑。坑爹的小米插座插满了，ps4没地方插了，于是打游戏的时候就把 NAS 电源拔了，<del>于是就忘了插，</del>所以 NAS 罢工很多天了。今天突(xian)发(de)奇(dan)想(teng)，把群晖系统干掉了(<del>其实就是把引导U盘给格式化了</del>)，然后打算装个ESXi玩玩。碰到了几个坑，记录如下:</p><h1 id="0X01-nfs41client-failed-to-load"><a href="#0X01-nfs41client-failed-to-load" class="headerlink" title="0X01 nfs41client failed to load"></a>0X01 nfs41client failed to load</h1><p>这个问题Google了一下，官方论坛说的是需要<strong>10/100/1000M</strong>有线网卡才可以，具体搜索实际的原因是网卡未被识别， <strong>RTL8111</strong> 网卡驱动未被包含在 ESXi 5.5 的包里面，所以需要解包安装镜像，将驱动打入然后重新打包。<br>详细解决方案在<a href="https://opoo.org/2015/install-vmware-esxi-6.0-with-88se9230-and-rtl8111e/" target="_blank" rel="noopener">这里</a></p><ul><li>下载工具 <a href="http://www.v-front.de/p/esxi-customizer.html#download" target="_blank" rel="noopener">ESXi-Customizer</a></li><li>下载 <a href="http://vibsdepot.v-front.de/depot/vft/net51-drivers-1.0/net51-drivers-1.0.0-1vft.510.0.0.799733.x86_64.vib" target="_blank" rel="noopener">Realtek RTL8111e 驱动</a></li><li>解压并打开 <strong>ESXi-Customizer</strong>，运行后弹出软件窗口第一个选择ESXi安装镜像，我的是5.5，第二个选择下载的网卡驱动。这里注意如果看不到 .vib 驱动文件，需要在弹出选择文件窗口中选择文件类型。之后生成即可。</li></ul><blockquote><p>需要注意的是，这款软件不支持Win10，用记事本打开脚本，搜索 <strong>unsupport</strong>，在那一行前面添加<strong>REM </strong>即可<img src="https://i.loli.net/2019/06/14/5d035cfa8b92226127.png" alt=""><br>生成后建议使用<a href="http://rufus.akeo.ie/?locale=zh_CN" target="_blank" rel="noopener">rufus</a>进行u盘的烧录。</p></blockquote><h1 id="0x02-Failed-to-Validate-Acceptance-Level-Failed-to-Check-Acceptance-Level-None"><a href="#0x02-Failed-to-Validate-Acceptance-Level-Failed-to-Check-Acceptance-Level-None" class="headerlink" title="0x02 Failed to Validate Acceptance Level. Failed to Check Acceptance Level: None"></a>0x02 Failed to Validate Acceptance Level. Failed to Check Acceptance Level: None</h1><p>这个问题比较好解决，重启笔记本，进入BIOS，将系统安全引导(<a href="http://www.ruanyifeng.com/blog/2013/01/secure_boot.html" target="_blank" rel="noopener">Secure Boot</a>）关掉即可。</p><h1 id="0x03-PCPU-0-locked-up-failed-to-ack-TLB-invalidate"><a href="#0x03-PCPU-0-locked-up-failed-to-ack-TLB-invalidate" class="headerlink" title="0x03 PCPU 0 locked up. failed to ack TLB invalidate"></a>0x03 PCPU 0 locked up. failed to ack TLB invalidate</h1><p>之后就是碰到了这个问题，搜索一番没有任何<a href="https://kb.vmware.com/s/article/2091670" target="_blank" rel="noopener">收获</a>，猜测是因为我安装的系统版本为 ESXi 6.5, 而在<strong>0x01</strong>中附加网卡驱动所用到的打包工具所支持的最高版本为 ESXi5.5，重新下载5.5版的镜像并把驱动打入即可。</p><h1 id="0x04-尝试升级至-ESXi-6-5"><a href="#0x04-尝试升级至-ESXi-6-5" class="headerlink" title="0x04 尝试升级至 ESXi 6.5"></a>0x04 尝试升级至 ESXi 6.5</h1><p>先说一下结果，以失败告终。</p><ol><li>下载6.5镜像使用<strong>ESXi-Customizer</strong>将驱动打入，全新安装<br>结果:<blockquote><p>安装无法继续，进度条还没读完就报错#0x03</p></blockquote></li><li>下载6.5镜像使用<a href="http://www.v-front.de/p/esxi-customizer-ps.html" target="_blank" rel="noopener"><strong>ESXi-Customizer-PS</strong></a>将驱动打入，全新安装<br>结果:<blockquote><p>因为开始用的<strong>ESXi-Customizer</strong>是不支持win10以及6.5版的系统的，猜测上一次安装失败是因为打出来的安装镜像有问题导致的，因此使用最新版本支持win10以及6.5版本ESXi的工具重新打包安装，结果仍然失败，报错#0x03</p></blockquote></li><li>安装5.5版本系统成功后，下载6.5升级包，在终端进行系统升级<br>结果:<blockquote><p>失败。启动时报错#0x03。</p></blockquote></li></ol><p><em>经过尝试发现这台机器以我现有的技术手段无法安装最新版ESXi，因此还是老老实实使用5.5版的系统吧。以上~</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h1&gt;&lt;p&gt;大学时用的笔记本是爆炸星的&lt;strong&gt;370R5E&lt;/strong&gt;,3代i3的处理器，显卡 8750m，性能还不错~在
      
    
    </summary>
    
      <category term="技术" scheme="https://imrhj.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ESXi" scheme="https://imrhj.cn/tags/ESXi/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative WebView 高度自适应网页</title>
    <link href="https://imrhj.cn/2017/react-native-webview-auto-height/"/>
    <id>https://imrhj.cn/2017/react-native-webview-auto-height/</id>
    <published>2017-04-01T07:39:37.000Z</published>
    <updated>2021-03-31T02:49:29.048Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/06/14/5d035d4578e9031465.png" alt=""></p><h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>在使用 <code>React Native</code> 的时候碰到一个需求，即将 <code>WebView</code> 与其他 <code>View</code> 进行混排，但是 <code>React Native</code> 本身并不像 <code>Android</code> 那样有类似 <code>wrap_content</code> 的属性进行高度控制，只能将高度写死。但是不同的页面高度肯定不一样的，这样就带来了一个问题: 怎么动态获取渲染后的网页高度并给 <code>WebView</code> 设置?</p><a id="more"></a><h1 id="0x02-思路"><a href="#0x02-思路" class="headerlink" title="0x02 思路"></a>0x02 思路</h1><p>根据之前搞 <code>Android</code> 的 <code>WebView</code> 的经验来看，方法有两种:</p><ol><li>动态注入 js 代码来获取页面高度</li><li>找前端兄弟让他在页面里面提前嵌入 js 代码，我在展示时调用</li></ol><p>经过查阅文档以及求助于水稻哥，发现别人的方法基本上都是属于动态注入来进行工作的，依赖于以下两个 API</p><ol><li><p><a href="http://facebook.github.io/react-native/releases/0.42/docs/webview.html#injectedjavascript" target="_blank" rel="noopener">injectedJavaScript?: string</a></p><blockquote><p>Set this to provide JavaScript that will be injected into the web page when the view loads.</p></blockquote></li><li><p><a href="http://facebook.github.io/react-native/releases/0.42/docs/webview.html#onnavigationstatechange" target="_blank" rel="noopener">onNavigationStateChange?: function</a></p><blockquote><p>Function that is invoked when the <code>WebView</code> loading starts or ends.</p></blockquote></li></ol><p>第一个函数即是注入 js 代码的，第二个是用来接受回调的，接下来只要在回调函数里拿到页面的高度即可。而当使用 <code>injectedJavaScrpit</code> 方法进行 js 注入时，<code>onNavigationStateChange</code> 的回调函数会多一个参数 : <code>jsEvaluationValue</code>, 这个参数里面存放的是 js 执行的结果。</p><p>进行测试的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;WebView</span><br><span class="line">source=&#123;&#123;<span class="attr">uri</span>: url&#125;&#125;</span><br><span class="line">automaticallyAdjustContentInsets=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">scrollEnabled=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">injectedJavaScript=&#123;<span class="string">'888'</span>&#125;</span><br><span class="line">onNavigationStateChange=&#123;(navState) =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'- - - - - - rhjlog navState '</span> + <span class="built_in">JSON</span>.stringify(navState));</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>打出来的 log 如下:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- - - - - - rhjlog navState &#123;<span class="string">"target"</span>:<span class="number">90</span>,<span class="string">"canGoBack"</span>:false,<span class="string">"loading"</span>:false,<span class="string">"title"</span>:<span class="string">""</span>,<span class="string">"canGoForward"</span>:false,<span class="string">"navigationType"</span>:<span class="string">"other"</span>,<span class="string">"url"</span>:<span class="string">"https://h5.117sport.com/share/article.html?id=259"</span>&#125;</span><br><span class="line">- - - - - - rhjlog navState &#123;<span class="string">"target"</span>:<span class="number">90</span>,<span class="string">"canGoBack"</span>:false,<span class="string">"loading"</span>:false,<span class="string">"title"</span>:<span class="string">"蜂潮运动"</span>,<span class="string">"canGoForward"</span>:false,<span class="string">"jsEvaluationValue"</span>:<span class="string">"888"</span>,<span class="string">"url"</span>:<span class="string">"https://h5.117sport.com/share/article.html?id=259"</span>&#125;</span><br></pre></td></tr></table></figure><p>我仿佛看到了成功在向我招手，加上高度控制代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsWebView</span> <span class="keyword">extends</span> <span class="title">BaseComp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state= &#123;</span><br><span class="line">            height: <span class="number">100</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">let</span> url = <span class="string">'https://h5.117sport.com/share/article.html?id=259'</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">                &lt;WebView</span><br><span class="line">                    style=&#123;&#123;<span class="attr">height</span>: <span class="keyword">this</span>.state.height&#125;&#125;</span><br><span class="line">                    source=&#123;&#123;<span class="attr">uri</span>: url&#125;&#125;</span><br><span class="line">                    automaticallyAdjustContentInsets=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">                    scrollEnabled=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">                    injectedJavaScript=&#123;<span class="string">'document.body.clientHeight'</span>&#125;</span><br><span class="line">                    onNavigationStateChange=&#123;(navState) =&gt; &#123;</span><br><span class="line">                        <span class="keyword">let</span> height = <span class="built_in">parseInt</span>(navState.jsEvaluationValue)</span><br><span class="line">                        <span class="keyword">if</span> (height &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">this</span>.setState(&#123; height &#125;)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;&#125;</span><br><span class="line">                 /&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，随着继续搜索，发现许多人都表明在 <code>Android</code> 平台上，回调函数返回的结果没有 <code>jsEvaluationValue</code> 这个字段！！ （经过测试，确实木有..）并且公司的页面使用这种方法，有一定的失败的概率，好像与渲染时间有关？</p><p>那么就只能换一种思路了，查看一下 <code>onNavigationStateChange</code> 方法的回调，字段如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"canGoForward"</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"canGoBack"</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"loading"</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"title"</span>:<span class="string">""</span>,</span><br><span class="line">    <span class="attr">"url"</span>:<span class="string">"https://h5.117sport.com/share/article.html?id=259"</span>,</span><br><span class="line">    <span class="attr">"target"</span>:<span class="number">89</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 <code>title</code> 这个字段是用不到的，因此可以在 <code>js</code> 代码里将 <code>title</code> 设为高度，然后读取 <code>title</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/06/14/5d035d4578e9031465.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h1&gt;&lt;p&gt;在使用 &lt;code&gt;React Native&lt;/code&gt; 的时候碰到一个需求，即将 &lt;code&gt;WebView&lt;/code&gt; 与其他 &lt;code&gt;View&lt;/code&gt; 进行混排，但是 &lt;code&gt;React Native&lt;/code&gt; 本身并不像 &lt;code&gt;Android&lt;/code&gt; 那样有类似 &lt;code&gt;wrap_content&lt;/code&gt; 的属性进行高度控制，只能将高度写死。但是不同的页面高度肯定不一样的，这样就带来了一个问题: 怎么动态获取渲染后的网页高度并给 &lt;code&gt;WebView&lt;/code&gt; 设置?&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://imrhj.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="React Native" scheme="https://imrhj.cn/tags/React-Native/"/>
    
      <category term="WebView" scheme="https://imrhj.cn/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>使用SharedPreferences遇到的一些问题</title>
    <link href="https://imrhj.cn/2016/use_sharedpreferences/"/>
    <id>https://imrhj.cn/2016/use_sharedpreferences/</id>
    <published>2016-07-22T05:15:53.000Z</published>
    <updated>2021-03-31T02:49:29.048Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/06/14/5d0397d8e9d3d38898.png" alt=""></p><h1 id="0x0-背景"><a href="#0x0-背景" class="headerlink" title="0x0 背景"></a>0x0 背景</h1><p>自从参加实习工作后，博客也没怎么更新了。。。（就是懒了）</p><a id="more"></a><p>最近在空闲时间撸了一个 <strong>Xposed</strong> 模块，用来修改<strong>Pokémon GO</strong>的定位坐标的。这个模块的思路来源于<a href="http://drops.wooyun.org/tips/17840" target="_blank" rel="noopener">这篇文章</a> ,因为乌云平台炸了，不知道何时恢复，因此可能暂时访问不了。这个模块有用户界面用于存储配置信息，但是在读取时使用 <strong>Xposed</strong> 自带的<code>XSharedPreferences</code>却出现读取不了的问题。今天写一记录一下在使用XSharedPreferences读取数据时遇到的坑点。</p><h1 id="0x1-过程"><a href="#0x1-过程" class="headerlink" title="0x1 过程"></a>0x1 过程</h1><p>最开始的时候我在写配置的时候使用的是<code>PreferenceManager.getDefaultSharedPreferences()</code>,在 <strong>Xposed</strong> 的<code>handleLoadPackage()</code>方法中hook本程序的<code>getApplicationContext()</code>方法去拿到 context,再使用<code>context.getSharedPreferences(BuildConfig.APPLICATION_ID, Context.MODE_WORLD_READABLE)</code>方法拿到<code>Preferences</code>，但是在使用它读取时无法读取到。而且这种方法即使可以也有个缺陷，就是每次使用前都要打开这个应用进行初始化，身为一个 xp 模块怎么能这么不中用呢！</p><p>转去 Google 发现，<code>XposedBridge</code>本身提供了一个类 : <strong>XSharedPreferences</strong>针对这种情况进行配置文件读取~</p><p>好咧，开工写代码 <code>XSharedPreferences preferences = new XSharedPreferences(BuildConfig.APPLICATION_ID);</code> 然而。。。。</p><p>仍然获取不到数据。。。</p><p>继续翻文档，我发现好像忽略了点什么，点开<code>getDefaultSharedPreferences()</code>方法的源码得知，它最后调用了<code>getSharedPreferences(name, Content.MODE_PRIVATE)</code>这个方法，也就是说生成的文件是私有的，而 Xposed 模块里的代码是hook 到 Andrioid 虚拟机那里，在目标 app 打开时调用的，所以<code>MODE_PRIVATE</code>肯定不能读取到，应该改为<code>MODE_WORLD_READABLE</code>。</p><p>OK,继续尝试，界面上的 Preferences 获取方法改成了<code>preferences = getSharedPreferences(BuildConfig.APPLICATION_ID, Context.MODE_WORLD_READABLE)</code>，再次运行，还是不行！！！</p><p>WTF！！！</p><p><code>adb shell</code> ，cd 到安装目录找到配置文件，文件名称是<code>包名.xml</code>，运行目标程序之后，当前目录下又多了个<code>包名_prefs.xml</code>文件。。</p><center><img src="https://i.loli.net/2019/06/14/5d0397fe1ece313070.png" alt="2016-07-25_2016548158703.jpg"></center><h1 id="0x2-总结"><a href="#0x2-总结" class="headerlink" title="0x2 总结"></a>0x2 总结</h1><p>所以说，原因就是两边的文件名不同。</p><ul><li><p>PACKAGE_NAME_prefs.xml:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PreferenceManager.getDefaultSharedPreferences(context);</span><br><span class="line">XSharedPreferences(PACKAGE_NAME);</span><br></pre></td></tr></table></figure></li><li><p>name.xml:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">context.getSharedPreferences(name, MODE);</span><br><span class="line">XSharedPreferences(PACKAGE_NAME, name);</span><br></pre></td></tr></table></figure></li></ul><p>以上~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/06/14/5d0397d8e9d3d38898.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;0x0-背景&quot;&gt;&lt;a href=&quot;#0x0-背景&quot; class=&quot;headerlink&quot; title=&quot;0x0 背景&quot;&gt;&lt;/a&gt;0x0 背景&lt;/h1&gt;&lt;p&gt;自从参加实习工作后，博客也没怎么更新了。。。（就是懒了）&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://imrhj.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://imrhj.cn/tags/Android/"/>
    
      <category term="Java" scheme="https://imrhj.cn/tags/Java/"/>
    
      <category term="网络请求" scheme="https://imrhj.cn/tags/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
    
      <category term="Xposed" scheme="https://imrhj.cn/tags/Xposed/"/>
    
  </entry>
  
  <entry>
    <title>自定义View setLayerType()方法会引起View重绘</title>
    <link href="https://imrhj.cn/2016/set-layer-type-make-view-redraw/"/>
    <id>https://imrhj.cn/2016/set-layer-type-make-view-redraw/</id>
    <published>2016-05-24T13:43:13.000Z</published>
    <updated>2021-03-31T02:49:29.048Z</updated>
    
    <content type="html"><![CDATA[<p>在开发一个检测体温的APP时，采用了自定义View控件作为温度显示模块，之后由于需要给背景添加阴影层，调用了<code>Paint.setShadowLayer()</code>方法，然而添加这个方法之后<code>View</code>没有任何反应，<code>Google</code>说需要给View设置软渲染，具体做法为调用<code>View</code>的<code>setLayerType(LAYER_TYPE_SOFTWARE, null)</code>方法，在开启它时，之后进行的绘制都会绘制到一张<code>Bitmap(software layer)</code>上，绘制完成后再渲染到<code>hardware layer</code>上。</p><blockquote><p>官网介绍<a href="https://developer.android.com/reference/android/view/View.html#LAYER_TYPE_SOFTWARE" target="_blank" rel="noopener">如下</a></p></blockquote><p>然而在使用过程中，我发现View开始不停的重绘，开始以为是<code>LAYER_TYPE_SOFTWARE</code>的特性，因为将其换成<code>LAYER_TYPE_HARDWARE</code>就不会发生重绘，<del>当然这样做以后上图中的阴影也没有了。。</del>然后发现<code>setLayerType</code>方法被我放在了onDraw方法里。。才发现这个方法会引起View重绘，View重绘又再次调用这个方法，于是</p><h1 id="Boom！！！！！！！！！！！！！"><a href="#Boom！！！！！！！！！！！！！" class="headerlink" title="Boom！！！！！！！！！！！！！"></a>Boom！！！！！！！！！！！！！</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开发一个检测体温的APP时，采用了自定义View控件作为温度显示模块，之后由于需要给背景添加阴影层，调用了&lt;code&gt;Paint.setShadowLayer()&lt;/code&gt;方法，然而添加这个方法之后&lt;code&gt;View&lt;/code&gt;没有任何反应，&lt;code&gt;Googl
      
    
    </summary>
    
      <category term="技术" scheme="https://imrhj.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://imrhj.cn/tags/Android/"/>
    
      <category term="Java" scheme="https://imrhj.cn/tags/Java/"/>
    
      <category term="View" scheme="https://imrhj.cn/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android透明状态栏实践</title>
    <link href="https://imrhj.cn/2016/android-translucent-status/"/>
    <id>https://imrhj.cn/2016/android-translucent-status/</id>
    <published>2016-05-03T13:26:19.000Z</published>
    <updated>2021-03-31T02:49:29.044Z</updated>
    
    <content type="html"><![CDATA[<p>关于透明状态栏<del>(沉浸式状态栏)</del>大家应该都有用过，从Android 4.4开始新加入的<code>windowTranslucentStatus</code>属性可以将<code>StatusBar</code>设置为透明，即在<code>v19</code>的<code>style.xml</code>中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentStatus"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后布局的内容会顶到顶栏。但是这种情况下<code>ActionBar</code>也会被顶栏遮挡，如图:</p><center><img src="https://i.loli.net/2019/06/14/5d035c0e5e86551230.png" alt="1560501261744.png"></center><p>此时有两种解决方法，一是给根布局添加<code>android:fitsSystemWindows=&quot;true&quot;</code>属性，将<code>StatusBar</code>空出来。但是。。。</p><center><img src="https://i.loli.net/2019/06/14/5d035c363ffa040545.png" alt=""></center><p>咳，大概是打开的方式不对，换种方式再来。</p><hr><h1 id="0x0-开启透明"><a href="#0x0-开启透明" class="headerlink" title="0x0 开启透明"></a>0x0 开启透明</h1><p>新建一个<code>styles.xml(v19)</code>，添加<code>windowTranslucentStatus</code>属性，这条属性即开启状态栏透明。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span></span><br><span class="line"><span class="xml">                <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentStatus"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="0x1-添加一个statusView"><a href="#0x1-添加一个statusView" class="headerlink" title="0x1 添加一个statusView"></a>0x1 添加一个statusView</h1><p>在根布局的顶部添加一个<code>View</code>,高度为<code>25dp</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/status_bar"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"25dp"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="0x2-代码中判断版本"><a href="#0x2-代码中判断版本" class="headerlink" title="0x2 代码中判断版本"></a>0x2 代码中判断版本</h1><p>当目标版本不低于v19时，将view隐藏，防止在低版本出现重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_test);</span><br><span class="line">View statusBar = findViewById(R.id.status_bar);</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">        statusBar.setVisibility(View.VISIBLE);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    statusBar.setVisibility(View.GONE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Android 4.4：</li></ul><center><img src="https://i.loli.net/2019/06/14/5d035ca0b8ec439606.png" alt=""></center><ul><li>Android 4.1:</li></ul><center><img src="https://i.loli.net/2019/06/14/5d035cb2e843e36613.png" alt=""></center>]]></content>
    
    <summary type="html">
    
      Android透明状态栏探索
    
    </summary>
    
      <category term="技术" scheme="https://imrhj.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://imrhj.cn/tags/Android/"/>
    
      <category term="Java" scheme="https://imrhj.cn/tags/Java/"/>
    
      <category term="StatusBar" scheme="https://imrhj.cn/tags/StatusBar/"/>
    
  </entry>
  
  <entry>
    <title>面试的可能知识点总结</title>
    <link href="https://imrhj.cn/2016/the-interview-knowledge/"/>
    <id>https://imrhj.cn/2016/the-interview-knowledge/</id>
    <published>2016-04-18T02:33:05.000Z</published>
    <updated>2021-03-31T02:49:29.048Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/06/14/5d0397968d9e384940.png" alt="1560516499989.png"></p><a id="more"></a><h1 id="1-Java对象大小与引用的大小"><a href="#1-Java对象大小与引用的大小" class="headerlink" title="1. Java对象大小与引用的大小"></a>1. Java对象大小与引用的大小</h1><p><a href="http://www.liaohuqiu.net/cn/posts/caculate-object-size-in-java/" target="_blank" rel="noopener">来源</a></p><p>一个实例化的对象在内存中需要存储的信息包括：</p><ul><li>对象的头部(对象的GC信息，hash值，类定义引用等)</li><li>对象的成员变量: 包括基本数据类型和引用。 如成员变量是一个引用, 引用了其他对象，被引用的对象内存另外计算。</li></ul><h2 id="1-1-对象的大小"><a href="#1-1-对象的大小" class="headerlink" title="1.1 对象的大小"></a>1.1 对象的大小</h2><p>一个对象的大小其中包含:</p><ul><li>自身的大小<blockquote><p>直接计算当前对象占用空间大小，包括当前类及超类的基本类型实例字段大小、引用类型实例字段引用大小、实例基本类型数组总占用空间、实例引用类型数组引用本身占用空间大小</p></blockquote></li><li>所引用对象的大小</li></ul><h2 id="1-2-引用的大小"><a href="#1-2-引用的大小" class="headerlink" title="1.2 引用的大小"></a>1.2 引用的大小</h2><p>在32位JVM上，一个对象引用占用4字节，64位上，占8个字节。</p><blockquote><p>如果不需要访问超过4G内存，可以通过<code>-XX:+UseCompressedOops</code>选项开启指针压缩。从<strong>Java 1.6.0_23</strong>开始，这个选项默认是开启的。</p></blockquote><hr><p>比如下面一个简单的类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">Object object;</span><br><span class="line">&#125;</span><br><span class="line">MyClass myClass = <span class="keyword">new</span> MyClass();</span><br></pre></td></tr></table></figure></p><p>创建一个<strong>myClass</strong>实例之后，首先需要在栈空间中分配一个地址空间，即引用，引用的大小视虚拟机平台，32位为4字节，64位为8字节<em>在开启指针压缩的情况下为4字节</em>。之后在堆空间中分配对象的类变量信息。本例中包括类的头部+一个int类型数值+一个引用类型。</p><h2 id="1-3-基本数据类型大小"><a href="#1-3-基本数据类型大小" class="headerlink" title="1.3 基本数据类型大小"></a>1.3 基本数据类型大小</h2><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小(位)</th><th style="text-align:center">大小(字节)</th><th style="text-align:center">范围</th></tr></thead><tbody><tr><td style="text-align:center">boolean*</td><td style="text-align:center">8</td><td style="text-align:center">1</td><td style="text-align:center">true/false</td></tr><tr><td style="text-align:center">byte</td><td style="text-align:center">8</td><td style="text-align:center">1</td><td style="text-align:center">-128 - 127</td></tr><tr><td style="text-align:center">char*</td><td style="text-align:center">16</td><td style="text-align:center">2</td><td style="text-align:center">0 - 65535</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">16</td><td style="text-align:center">2</td><td style="text-align:center">-32768 - 23767</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">32</td><td style="text-align:center">4</td><td style="text-align:center">-2147483648 - 2147483647</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">64</td><td style="text-align:center">8</td><td style="text-align:center">-9223372036854775808 - 9223372036854775807</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">32</td><td style="text-align:center">4</td><td style="text-align:center">-3.4E38 - 3.4E38</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">64</td><td style="text-align:center">8</td><td style="text-align:center">-1.7E308 - 1.7E308</td></tr></tbody></table><blockquote><p>需要注意的是，boolean类型在内存中实际使用的只有一字节的最低位，其余位全置0。因为内存处理以字节(<strong>byte</strong>)为单位，而不是位(<strong>bit</strong>)。char类型从字符型对应的整型数来划分，其表示范围是0 - 65535</p></blockquote><h2 id="1-4-对象头部大小"><a href="#1-4-对象头部大小" class="headerlink" title="1.4 对象头部大小"></a>1.4 对象头部大小</h2><p>对象头结构如下<a href="http://mail.openjdk.java.net/pipermail/hotspot-runtime-dev/2008-May/000147.html" target="_blank" rel="noopener">来源</a></p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">mark word</th><th style="text-align:center">class pointer</th><th style="text-align:center">array size (opt)</th><th style="text-align:center">padding</th></tr></thead><tbody><tr><td style="text-align:center"><strong>32位</strong></td><td style="text-align:center">4byte</td><td style="text-align:center">4byte</td><td style="text-align:center"><del>4byte</del></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>64位+UseCompressedOops</strong></td><td style="text-align:center">8byte</td><td style="text-align:center">4byte</td><td style="text-align:center"><del>4byte</del></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>64位-UseCompressedOops</strong></td><td style="text-align:center">8byte</td><td style="text-align:center">8byte</td><td style="text-align:center"><del>4byte</del></td></tr></tbody></table><blockquote><p>每个对象都有一个mark work头部，以及一个引用，指向类的信息。在32位JVM上，markword 4个字节，整个头部有8字节大小。</p></blockquote><blockquote><p>array size(opt)在对象为数组的时候启用，4字节（4byte）长度。JVM规定对象头（Object Header）长度为2个字（word），在32bit JVM中，一个word长度为4byte，64bit JVM中，长度为8byte</p></blockquote><blockquote><p>在未开启UseCompressedOops的64位JVM上，对象头有16字节大小。</p></blockquote><blockquote><p>在开启UseCompressedOops的64位机器上，引用（class pointer）成了4字节，一共12字节。按照8位对齐，实际占用16字节。</p></blockquote><h2 id="1-5-数组内存占用大小"><a href="#1-5-数组内存占用大小" class="headerlink" title="1.5 数组内存占用大小"></a>1.5 数组内存占用大小</h2><p>数组在内存中也是以引用形式存在，所以也有对象的头部，数组还有一个记录数组长度的int类型，随后是每一个数组的元素：基本数据类型或引用类型。也按照8字节对齐。</p><ul><li><strong>32位机器</strong><blockquote><p>byte[0] 12字节的对象头部(<em>mark word: 4byte, class pointer: 4byte, array size: 4byte</em>),对齐后是16字节。实际 byte[0] ~byte[4]都是16字节(每个byte的长度为1byte，byte[0]-byte[4]占用padding长度)。</p></blockquote></li><li><strong>64位+UseCompressedOops</strong><blockquote><p>byte[0] 16字节的对象头部(<em>mark word: 8byte, class pointer: 4byte, array size: 4byte</em>),byte<a href="https://i.loli.net/2018/09/30/5bb06c7783b27.png" target="_blank" rel="noopener">1</a> ~byte[8] 24字节大小。</p></blockquote></li><li><strong>64 位-UseCompressedOops</strong><blockquote><p>byte[0] 20字节的对象头部(<em>mark word: 8byte, class pointer: 8byte, array size: 4byte</em>),对齐后是24字节。byte[0] ~ byte[4] 都是24字节。</p></blockquote></li></ul><h1 id="2-单链表"><a href="#2-单链表" class="headerlink" title="2. 单链表"></a>2. 单链表</h1><p><a href="http://wuchong.me/blog/2014/03/25/interview-link-questions/" target="_blank" rel="noopener">参考1</a> <a href="http://blog.sina.com.cn/s/blog_725dd1010100tqwp.html" target="_blank" rel="noopener">参考2</a></p><p>给定一个单链表，只给出头指针head：</p><ol><li>如何判断是否存在环？</li><li>如何知道环的长度？</li><li>如何找出环的连接点在哪里？</li><li>带环链表的长度是多少？</li><li>单链表转置</li><li>求链表倒数第k个节点</li><li>求链表的中间节点</li><li>在O(1)时间删除链表节点</li></ol><h2 id="2-1-判断一个单链表是否有环"><a href="#2-1-判断一个单链表是否有环" class="headerlink" title="2.1 判断一个单链表是否有环"></a>2.1 判断一个单链表是否有环</h2><p><strong>题目描述:</strong> 输入一个单向链表，判断链表是否有环？</p><p><strong>题目分析:</strong></p><p>对于这个问题，使用追赶的方法，设置两个头指针<code>fast</code> <code>slow</code>，每次让<code>high</code>移动两个位置，<code>low</code>移动一个位置，如果有环的话，两个肯定会有相等的时候，如果high指针最后为空则说明没有环。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isExistLoop</span><span class="params">(Node *head)</span> </span>&#123;</span><br><span class="line">Node *fast = head;</span><br><span class="line">Node *slow = head;</span><br><span class="line"><span class="keyword">while</span> (fast != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">slow = slow-&gt;next;</span><br><span class="line">fast = fast-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (slow == fast)</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-如何知道环的长度"><a href="#2-2-如何知道环的长度" class="headerlink" title="2.2 如何知道环的长度"></a>2.2 如何知道环的长度</h2><p><strong>题目描述:</strong> 输入一个单链表，如果单链表存在环，环的长度是多少？</p><p><strong>题目分析:</strong></p><p>首先确定问题1里两个指针相遇的节点，记录下这个节点，之后让其中一个再跑一圈，再次碰撞走过的步数就是环的长度。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLoopLength</span><span class="params">(Node *head)</span> </span>&#123;</span><br><span class="line">Node *fast = head;</span><br><span class="line">Node *slow = head;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (fast != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">slow = slow-&gt;next;</span><br><span class="line">fast = fast-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (fast == slow)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fast != slow) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">fast = fast-&gt;next;</span><br><span class="line">sum++;</span><br><span class="line">&#125; <span class="keyword">while</span> (fast != slow);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-如何找出环的连接点在哪里？"><a href="#2-3-如何找出环的连接点在哪里？" class="headerlink" title="2.3 如何找出环的连接点在哪里？"></a>2.3 如何找出环的连接点在哪里？</h2><p><strong>题目描述:</strong> 输入一个单向链表，判断链表是否有环。如果链表存在环，如何找到环的连接点？</p><p><strong>题目分析:</strong><br>首先确定链表有没有环，如果有环的话，让<code>fast</code>指针从头节点重新走一遍，走的步长为1，同时让<code>slow</code>节点从当前位置继续前进，当两个节点再次相遇时，所在的节点即是环的<strong>连接点</strong>。<br>有定理如下：</p><blockquote><p>碰撞点p到连接点的距离=头指针到连接点的距离，因此，分别从碰撞点、头指针开始走，相遇的那个点就是连接点。</p></blockquote><p><strong>推导:</strong>  假设从头结点到环连接点的距离为a，从连接点到碰撞点的距离为b，圆周距离为L，那么从两个指针出发到碰撞，两个指针分别走过的路程为:</p><ul><li><code>fast</code> : <code>a + b + k * L = 2n</code></li><li><code>slow</code> : <code>a + b = n</code></li></ul><p>又因为<code>fast</code>指针所走过的路程为<code>slow</code>指针所走路程的2倍：<code>a + b = k * L = n</code> 。所以一个指针从头结点出发，另一个从碰撞点出发，经过n步之后，还可以到达碰撞点。因为b这段距离是在环内走的，所以只有a这段是不同的，当两个指针再次重合时，必然是在连接点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node* <span class="title">findLoopPoint</span><span class="params">(Node *head)</span> </span>&#123;</span><br><span class="line">Node *fast = head;</span><br><span class="line">Node *slow = head;</span><br><span class="line"><span class="keyword">while</span> (fast != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">slow = slow-&gt;next;</span><br><span class="line">fast = fast-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (slow == fast)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fast != slow) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  fast = head;</span><br><span class="line">  <span class="keyword">while</span> (fast != slow) &#123;</span><br><span class="line">  fast = fast-&gt;next;</span><br><span class="line">      slow = slow-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> fast;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-带环链表的长度是多少？"><a href="#2-4-带环链表的长度是多少？" class="headerlink" title="2.4 带环链表的长度是多少？"></a>2.4 带环链表的长度是多少？</h2><p><strong>题目描述:</strong> 输入一个单向链表，判断链表是否有环。如果链表存在环，链表的长度是多少?</p><p><strong>题目分析:</strong></p><p>使用问题2中获得的环的长度加上问题三中环的连接点位置，即为链表的长度。</p><p><del>代码省略</del></p><h2 id="2-5-单链表转置"><a href="#2-5-单链表转置" class="headerlink" title="2.5 单链表转置"></a>2.5 单链表转置</h2><p><strong>题目描述：</strong>输入一个单向链表，输出逆序反转后的链表</p><p><strong>题目分析：</strong></p><p>链表的转置是一个很常见、很基础的数据结构题了，非递归的算法很简单，用三个临时指针 pre、head、next 在链表上循环一遍即可。递归算法也是比较简单。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单链表的转置，循环方法</span></span><br><span class="line"><span class="function">Node* <span class="title">reverse</span><span class="params">(Node *head)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> head;</span><br><span class="line">  Node *pre = <span class="literal">NULL</span>;</span><br><span class="line">  Node *next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</span><br><span class="line">  next = head-&gt;next;</span><br><span class="line">      head-&gt;next = pre;</span><br><span class="line">      pre = head;</span><br><span class="line">      head = next;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 递归方法</span></span><br><span class="line"><span class="function">Node* <span class="title">reverseByRecursion</span><span class="params">(Node *head)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> head;</span><br><span class="line">  Node *phead = reverseByRecursion(head-&gt;next);</span><br><span class="line">  head-&gt;next-&gt;next = haed;</span><br><span class="line">  head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> phead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-求链表倒数第k个节点"><a href="#2-6-求链表倒数第k个节点" class="headerlink" title="2.6 求链表倒数第k个节点"></a>2.6 求链表倒数第k个节点</h2><p><strong>题目描述：</strong> 给定一个单链表，设计一个时间和空间都高效的算法来找到链表的倒数第k个元素。当k=0时，返回链表的最后一个元素。</p><p><strong>题目分析:</strong></p><p>设置两个指针，指向当前位置的指针和前m个元素的指针。在遍历的时候做统计， 当第一个指针移动m个时，同时移动第二个指针。当链表长度小于m时，如果不进行处理，很容易引起空指针异常。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node* <span class="title">FindKToLastElement</span><span class="params">(Node *head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (k &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  Node *p1, *p2;</span><br><span class="line">  p1 = head;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; k; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (p1-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">  p1 = p1-&gt;next;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">  p2 = head;</span><br><span class="line">  <span class="keyword">while</span> (p1-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">  p1 = p1-&gt;next;</span><br><span class="line">      p2 = p2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> p2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-7-求链表的中间节点"><a href="#2-7-求链表的中间节点" class="headerlink" title="2.7 求链表的中间节点"></a>2.7 求链表的中间节点</h2><p><strong>题目描述：</strong>求链表的中间节点，如果链表的长度为偶数，返回中间两个节点的任意一个，若为奇数，则返回中间节点。</p><p><strong>题目分析：</strong></p><p>此题的解决思路和第3题「求链表的倒数第 k 个节点」很相似。可以先求链表的长度，然后计算出中间节点所在链表顺序的位置。但是如果要求只能扫描一遍链表，如何解决呢？最高效的解法和第3题一样，通过两个指针来完成。用两个指针从链表头节点开始，一个指针每次向后移动两步，一个每次移动一步，直到快指针移到到尾节点，那么慢指针即是所求。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node* <span class="title">theMiddleNode</span><span class="params">(Node *head)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (head == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  Node *slow = head;</span><br><span class="line">  Node *fast = head;</span><br><span class="line">  <span class="keyword">while</span> (fast != null &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">  fast = fast-&gt;next-&gt;next;</span><br><span class="line">      slow = fast-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-8-在O-1-时间删除链表节点"><a href="#2-8-在O-1-时间删除链表节点" class="headerlink" title="2.8 在O(1)时间删除链表节点"></a>2.8 在O(1)时间删除链表节点</h2><p><strong>题目描述：</strong>给定链表的头指针和一个节点指针，在O(1)时间删除该节点。[Google面试题]</p><p><strong>分析：</strong></p><p>本题与《编程之美》上的「从无头单链表中删除节点」类似。主要思想都是「狸猫换太子」，即用下一个节点数据覆盖要删除的节点，然后删除下一个节点。但是如果节点是尾节点时，该方法就行不通了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteRandomNode</span><span class="params">(Node *cur)</span> </span>&#123;</span><br><span class="line">  assert(cur != <span class="literal">NULL</span>);</span><br><span class="line">assert(cur-&gt;next != <span class="literal">NULL</span>);</span><br><span class="line">  Node pNext = cur-&gt;next;</span><br><span class="line">  cur-&gt;data = pNext-&gt;data;</span><br><span class="line">  cur-&gt;next = pNext-&gt;next;</span><br><span class="line">  <span class="keyword">delete</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-JAVA"><a href="#3-JAVA" class="headerlink" title="3.JAVA"></a>3.JAVA</h1><h2 id="3-1-JAVA虚拟机"><a href="#3-1-JAVA虚拟机" class="headerlink" title="3.1 JAVA虚拟机"></a>3.1 JAVA虚拟机</h2><ol><li>原子性</li><li>可见性</li><li>有序性</li></ol><h3 id="3-1-1-原子性"><a href="#3-1-1-原子性" class="headerlink" title="3.1.1 原子性"></a>3.1.1 原子性</h3><blockquote><p>​    原子性就是一个操作（可能是需要多步完成的复合操作）不能被打断，一旦开始执行直到执行完其他线程或多核都必须等待。比如”i++”表达式，就不是原子的，汇编后会发现由三条指令（读取，修改，写入）完成，每一条指令完成后都可能被中断。</p></blockquote><p>由Java内存模型来直接保证的原子性变量操作包括<code>read</code>、<code>load</code>、<code>use</code>、<code>assign</code>、<code>store</code>和<code>write</code>六个，大致可以认为基础数据类型的访问和读写是具备原子性的。如果应用场景需要一个更大范围的原子性保证，Java内存模型还提供了<code>lock</code>和<code>unlock</code>操作来满足这种需求，尽管虚拟机未把<code>lock</code>与<code>unlock</code>操作直接开放给用户使用，但是却提供了更高层次的字节码指令<code>monitorenter</code>和<code>monitorexit</code>来隐匿地使用这两个操作，这两个字节码指令反映到Java代码中就是同步块—<code>synchronized</code>关键字，因此在<code>synchronized</code>块之间的操作也具备原子性。</p><h2 id="3-2-Object中的方法"><a href="#3-2-Object中的方法" class="headerlink" title="3.2 Object中的方法"></a>3.2 Object中的方法</h2><p>如下，共有9种方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timeout &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"timeout value is negative"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span> (nanos &lt; <span class="number">0</span> || nanos &gt; <span class="number">999999</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"nanosecond timeout value out of range"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (nanos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">timeout++;</span><br><span class="line">&#125;</span><br><span class="line">wait(timeout);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">wait(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123; &#125;</span><br></pre></td></tr></table></figure><ol><li><code>getClass():</code> 返回此 Object 的运行时类。 </li><li><code>hashCode():</code> 返回该对象的哈希值。</li><li><code>equals():</code> 指示其他某个对象是否与此对象“相等”。 </li><li><code>clone():</code> 创建并返回此对象的一个副本。</li><li><code>toString():</code> 返回对象的字符串表示。</li><li><code>notify():</code> 唤醒在次对象监视器上等待的单个线程<em>(注意的是在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且不是按优先级)</em>。</li><li><code>ntifyAll():</code> 唤醒在此对象监视器上等待的所有线程。 </li><li><code>wait():</code> 在其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者超过指定的时间量前，导致当前线程等待。 </li><li><code>finalize():</code> 当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。 </li></ol><h1 id="4-排序算法"><a href="#4-排序算法" class="headerlink" title="4. 排序算法"></a>4. 排序算法</h1><h2 id="4-1-直接选择排序-不稳定"><a href="#4-1-直接选择排序-不稳定" class="headerlink" title="4.1 直接选择排序: 不稳定"></a>4.1 直接选择排序: <em>不稳定</em></h2><h3 id="4-1-1-说明"><a href="#4-1-1-说明" class="headerlink" title="4.1.1 说明"></a>4.1.1 说明</h3><center><strong>效果图:</strong> <img src="https://i.loli.net/2018/09/30/5bb06cc8e5de2.gif" alt="sort1"> </center><p>直接选择排序(Straight Select Sorting) 也是一种简单的排序方法，它的基本思想是：第一次从R[0]~R[n-1]中选取最小值，与R[0]交换，第二次从R<a href="https://i.loli.net/2018/09/30/5bb06c7783b27.png" target="_blank" rel="noopener">1</a>~R[n-1]中选取最小值，与R<a href="https://i.loli.net/2018/09/30/5bb06c7783b27.png" target="_blank" rel="noopener">1</a>交换，….，第i次从R[i-1]~R[n-1]中选取最小值，与R[i-1]交换，…..，第n-1次从R[n-2]~R[n-1]中选取最小值，与R[n-2]交换，总共通过n-1次，得到一个按排序码从小到大排列的有序序列·</p><h3 id="4-1-2-代码"><a href="#4-1-2-代码" class="headerlink" title="4.1.2 代码"></a>4.1.2 代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(elemtype R[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, m;</span><br><span class="line">elemtype t;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">m = i;</span><br><span class="line"><span class="keyword">for</span>(j = i+<span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(R[j] &lt; R[m])</span><br><span class="line">m = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m != i) &#123;</span><br><span class="line">t = R[i];</span><br><span class="line">R[i] = R[m];</span><br><span class="line">R[m] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-3-效率分析"><a href="#4-1-3-效率分析" class="headerlink" title="4.1.3 效率分析"></a>4.1.3 效率分析</h3><blockquote><p>在直接选择排序中，共需要进行n-1次选择和交换，每次选择需要进行 n-i 次比较 (1&lt;=i&lt;=n-1),而每次交换最多需要3次移动，因此，总的比较次数C=(n*n - n)/2,总的移动次数 3(n-1).由此可知，直接选择排序的时间复杂度为 O(n2) (n的平方)，所以当记录占用字节数较多时，通常比 直接插入排序的执行速度快些。</p><p>由于在直接选择排序中存在着不相邻元素之间的互换，因此，直接选择排序是一种不稳定的排序方法。</p></blockquote><h2 id="4-2-直接插入排序-稳定"><a href="#4-2-直接插入排序-稳定" class="headerlink" title="4.2 直接插入排序:稳定"></a>4.2 直接插入排序:<em>稳定</em></h2><h3 id="4-2-1-说明"><a href="#4-2-1-说明" class="headerlink" title="4.2.1 说明"></a>4.2.1 说明</h3><center><img src="https://i.loli.net/2018/09/30/5bb06ce8d30ec.gif" alt="sort2"></center><p>插入排序的基本方法是：每步将一个待排序的记录按其关键字的大小插到前面已经排序的序列中的适当位置，直到全部记录插入完毕为止。</p><p>具体实现有两种方法:</p><ol><li><p>简单方法</p><pre><code>&gt; 首先在当前有序区R[1..i-1]中查找R[i]的正确插入位置k(1≤k≤i-1)；然后将R[k．．i-1]中的记录均后移一个位置，腾出k位置上的空间插入R[i]。</code></pre></li><li><p>改进的方法</p><blockquote><p>一种查找比较操作和记录移动操作交替地进行的方法。具体做法：<br>将待插入记录R[i]的关键字从右向左依次与有序区中记录R<a href="j=i-1，i-2，…，1">j</a>的关键字进行比较：<br>① 若R[j]的关键字大于R[i]的关键字，则将R[j]后移一个位置；<br>②若R[j]的关键字小于或等于R[i]的关键字，则查找过程结束，j+1即为R[i]的插入位置。<br>关键字比R[i]的关键字大的记录均已后移，所以j+1的位置已经腾空，只要将R[i]直接插入此位置即可完成一趟直接插入排序。</p></blockquote></li></ol><p>算法中引进的附加记录L[0]称监视哨或哨兵(Sentinel)。哨兵有两个作用：</p><ol><li>进人查找(插入位置)循环之前，它保存了L[i]的副本，使不致于因记录后移而丢失L[i]的内容；</li><li>它的主要作用是：在查找循环中”监视”下标变量j是否越界。一旦越界(即j=0)，因为L[0].可以和自己比较，循环判定条件不成立使得查找循环结束，从而避免了在该循环内的每一次均要检测j是否越界(即省略了循环判定条件”j&gt;=1”)。</li></ol><h3 id="4-2-2-代码"><a href="#4-2-2-代码" class="headerlink" title="4.2.2 代码"></a>4.2.2 代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(SqList &amp;L)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j;</span><br><span class="line"> <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= L.leight; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (L.r[i].key &lt; L.r[i<span class="number">-1</span>].key) &#123;</span><br><span class="line">  L.r[<span class="number">0</span>] = L.r[i];</span><br><span class="line">      L.r[i] = L.r[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (j = i - <span class="number">2</span>; L.r[<span class="number">0</span>].key &lt; L.r[j].key; j--) &#123;</span><br><span class="line">  L.r[j+<span class="number">1</span>] = L.r[j];</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-3-效率分析"><a href="#4-2-3-效率分析" class="headerlink" title="4.2.3 效率分析"></a>4.2.3 效率分析</h3><blockquote><p>从空间来看，直接插入排序仅需要一个记录的辅助空间。</p><p>从时间来看，其时间复杂度为<code>O(n^2)</code>。</p></blockquote><h2 id="4-3-折半插入排序-稳定"><a href="#4-3-折半插入排序-稳定" class="headerlink" title="4.3 折半插入排序: 稳定"></a>4.3 折半插入排序: <em>稳定</em></h2><h3 id="4-3-1-说明"><a href="#4-3-1-说明" class="headerlink" title="4.3.1 说明"></a>4.3.1 说明</h3><p>折半插入排序（binary insertion sort）是对<code>插入排序</code>算法的一种改进，由于排序算法过程中，就是不断的依次将元素插入前面已排好序的序列中。由于前半部分为已排好序的数列，这样我们不用按顺序依次寻找插入点，可以采用折半查找的方法来加快寻找插入点的速度。</p><h3 id="4-3-2-代码"><a href="#4-3-2-代码" class="headerlink" title="4.3.2 代码"></a>4.3.2 代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BInsertSort</span><span class="params">(SqList &amp;L)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= L.lenght; i++) &#123;</span><br><span class="line">  L.r[<span class="number">0</span>] = L.r[i];</span><br><span class="line">      low = <span class="number">1</span>; high = i - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">  m = (low + high) / <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">if</span> (L.r[<span class="number">0</span>].key &lt; L.r[m].key) &#123;</span><br><span class="line">         <span class="comment">//折半区在低半区</span></span><br><span class="line">  high = m - <span class="number">1</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//折半区在高半区</span></span><br><span class="line">  low = m + <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">//记录后移</span></span><br><span class="line">      <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= high +<span class="number">1</span>; j--) &#123;</span><br><span class="line">  L.r[j+<span class="number">1</span>] = L.r[j];</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//插入</span></span><br><span class="line">      L.r[high+<span class="number">1</span>] = L.r[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-3-效率分析"><a href="#4-3-3-效率分析" class="headerlink" title="4.3.3 效率分析"></a>4.3.3 效率分析</h3><blockquote><p>折半插入排序算法是一种稳定的排序算法，比直接插入算法明显减少了关键字之间比较的次数，因此速度比<code>直接插入排序</code>算法快，但记录移动的次数没有变，所以折半插入排序算法的时间复杂度仍然为<code>O(n^2)</code>，与直接插入排序算法相同。附加空间<code>O(1)</code>。</p><p>折半查找只是减少了比较次数，但是元素的移动次数不变，所以时间复杂度为<code>O(n^2)</code>。</p></blockquote><h2 id="4-4-冒泡排序-稳定"><a href="#4-4-冒泡排序-稳定" class="headerlink" title="4.4 冒泡排序:稳定"></a>4.4 冒泡排序:<em>稳定</em></h2><h3 id="4-4-1-说明"><a href="#4-4-1-说明" class="headerlink" title="4.4.1 说明"></a>4.4.1 说明</h3><h3 id=""><a href="#" class="headerlink" title=""></a><center><img src="https://i.loli.net/2018/09/30/5bb06cffbba9c.gif" alt="sort4"></center></h3><p>是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢<strong>浮</strong>到数列的顶端。</p><h3 id="4-4-2-代码"><a href="#4-4-2-代码" class="headerlink" title="4.4.2 代码"></a>4.4.2 代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, temp;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; j++)</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span> - j; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] &gt; a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                temp = a[i];</span><br><span class="line">                a[i] = a[i + <span class="number">1</span>];</span><br><span class="line">                a[i + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-3-效率分析"><a href="#4-4-3-效率分析" class="headerlink" title="4.4.3 效率分析"></a>4.4.3 效率分析</h3><blockquote><p>若文件的初始状态是正序的，一趟扫描即可完成排序。所需的关键字比较次数和记录移动次数均达到最小值。所以，冒泡排序最好的时间复杂度为<code>O(n)</code>.</p><p>若初始文件是反序的，需要进行<code>n-1</code>趟排序。每趟排序要进行<code>n-i</code>次关键字的比较<code>(1≤i≤n-1)</code>，且每次比较都必须移动记录三次来达到交换记录位置。在这种情况下，比较和移动次数均达到最大值：</p><center><img src="https://i.loli.net/2019/06/14/5d0397adee98870969.png" alt=""> </center><center><img src="https://i.loli.net/2019/06/14/5d0397be10a5685845.png" alt=""> </center><p>冒泡排序的最坏时间复杂度为<code>O(n^2)</code>.<br>综上，因此冒泡排序总的平均时间复杂度为<code>O(n^2)</code>.</p></blockquote><h2 id="4-5-希尔排序-不稳定"><a href="#4-5-希尔排序-不稳定" class="headerlink" title="4.5 希尔排序:不稳定"></a>4.5 希尔排序:<em>不稳定</em></h2><h3 id="4-5-1-说明"><a href="#4-5-1-说明" class="headerlink" title="4.5.1 说明"></a>4.5.1 说明</h3><p><strong>希尔排序</strong>，也称<strong>递减增量</strong>排序算法，是<strong>插入排序</strong>的一种更高效的改进版本。希尔排序是不稳定排序算法。</p><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率</li></ul><ul><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位</li></ul><p>一个更好理解的希尔排序实现：将数组列在一个表中并对列排序（用插入排序）。重复这过程，不过每次用更长的列来进行。最后整个表就只有一列了。将数组转换至表是为了更好地理解这算法，算法本身仅仅对原数组进行排序</p><p>希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。这样可以让一个元素可以一次性地朝最终位置前进一大步。然后算法再取越来越小的步长进行排序，算法的最后一步就是普通的插入排序，但是到了这步，需排序的数据几乎是已排好的了（此时插入排序较快）。</p><p>假设有一个很小的数据在一个已按升序排好序的数组的末端。如果用复杂度为O(n2)的排序（冒泡排序或插入排序），可能会进行n次的比较和交换才能将该数据移至正确位置。而希尔排序会用较大的步长移动数据，所以小数据只需进行少数比较和交换即可到正确位置。（通过增加索引的步长，例如是用<code>i += step_size</code>而不是<code>i++</code>）。</p><p>其排序过程图如下:</p><center><img src="https://i.loli.net/2018/09/30/5bb06d2c60614.gif" alt="sort5"></center><h3 id="4-5-2-代码"><a href="#4-5-2-代码" class="headerlink" title="4.5.2 代码"></a>4.5.2 代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellInsert</span> <span class="params">(SqList &amp;L, <span class="keyword">int</span> dk)</span> </span>&#123;</span><br><span class="line"><span class="comment">//对顺序表L做一趟希尔插入排序。与直接插入排序相比:</span></span><br><span class="line">  <span class="comment">// 1. 前后记录位置增量为dk</span></span><br><span class="line">  <span class="comment">// 2. r[0]只是暂存单元，不是哨兵。当j &lt;= 0时，插入位置已经找到。</span></span><br><span class="line">  <span class="keyword">for</span> (i = dk + <span class="number">1</span>; i &lt;= L.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (L.r[i].key &lt; L.r[i - dk].key) &#123;<span class="comment">//需要将L.r[i]插入有序增量子序列</span></span><br><span class="line">  L.r[<span class="number">0</span>] = L.r[i];<span class="comment">//暂存在r[0]</span></span><br><span class="line">          <span class="keyword">for</span> (j = i - dk; j &gt;<span class="number">0</span> &amp;&amp; L.r[<span class="number">0</span>].key &lt; L.r[j].key; j-= dk) &#123;</span><br><span class="line">  L.r[j + dk] = L.r[j];<span class="comment">//记录后移，查找插入位置</span></span><br><span class="line">&#125;</span><br><span class="line">        L.r[j+dk] = L.r[<span class="number">0</span>];<span class="comment">//插入</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span> <span class="params">(SqList &amp;L, <span class="keyword">int</span> dlta[], <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//使用增量序列dlta[0..t-1]对顺序表L做希尔排序</span></span><br><span class="line">  <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; t; k++) &#123;</span><br><span class="line">  ShellInsert(L, dlta[k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-3-效率分析"><a href="#4-5-3-效率分析" class="headerlink" title="4.5.3 效率分析"></a>4.5.3 效率分析</h3><p><strong>增量</strong>的选择是希尔排序的重要部分。只要最增量长为1任何增量序列都可以工作。算法最开始以一定的增量进行排序。然后会继续以一定增量进行排序，最终算法以增量为1进行排序。当增量为1时，算法变为插入排序，这就保证了数据一定会被排序。</p><p>Donald Shell最初建议增量选择为<code>2/n</code>并且对增量取<strong>半</strong>直到增量达到1。虽然这样取可以比<code>O(n^2)</code>类的算法（<em>插入排序</em>）更好，但这样仍然有减少平均时间和最差时间的余地。可能<strong>希尔排序</strong>最重要的地方在于当用较小步长排序后，以前用的较大步长仍然是有序的。比如，如果一个数列以增量5进行了排序然后再以增量3进行排序，那么该数列不仅是以增量3有序，而且是以增量5有序。如果不是这样，那么算法在<em>迭代</em>过程中会打乱以前的顺序，那就不会以如此短的时间完成排序了。</p><h2 id="4-6-归并排序-稳定"><a href="#4-6-归并排序-稳定" class="headerlink" title="4.6 归并排序:稳定"></a>4.6 归并排序:<em>稳定</em></h2><h3 id="4-6-1-说明"><a href="#4-6-1-说明" class="headerlink" title="4.6.1 说明"></a>4.6.1 说明</h3><center><img src="https://i.loli.net/2018/09/30/5bb06d4246832.gif" alt="sort6"></center><p>归并操作（merge），也叫归并算法，指的是将两个已经排序的序列合并成一个序列的操作。归并排序算法依赖归并操作。</p><ul><li>迭代法<ol><li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li><li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li><li>重复步骤3直到某一指针到达序列尾</li><li>将另一序列剩下的所有元素直接复制到合并序列尾</li></ol></li></ul><ul><li>递归法<ol><li>将序列每相邻两个数字进行归并操作，形成floor(n/2)个序列，排序后每个序列包含两个元素</li><li>将上述序列再次归并，形成floor(n/4)个序列，每个序列包含四个元素</li><li>重复步骤2，直到所有元素排序完毕</li></ol></li></ul><h3 id="4-6-2-代码"><a href="#4-6-2-代码" class="headerlink" title="4.6.2 代码"></a>4.6.2 代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/06/14/5d0397968d9e384940.png&quot; alt=&quot;1560516499989.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://imrhj.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://imrhj.cn/tags/Android/"/>
    
      <category term="Java" scheme="https://imrhj.cn/tags/Java/"/>
    
      <category term="对象" scheme="https://imrhj.cn/tags/%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit2学习笔记</title>
    <link href="https://imrhj.cn/2016/Retrofit2-learn/"/>
    <id>https://imrhj.cn/2016/Retrofit2-learn/</id>
    <published>2016-04-16T07:56:44.000Z</published>
    <updated>2021-03-31T02:49:29.044Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/06/14/5d035d665a7e196570.png" alt=""></p><p>平时在进行 Android 开发的时候，如果需要进行网络请求，一般都会选择使用<strong>HttpURLConnection</strong> 和 <strong>HttpClient</strong>。但是这两个用起来实在太过繁琐，需要设置一大堆，如果不封装的话，代码的复用率太低，所以就有了Android 的网络通信框架，比如 <a href="https://github.com/AsyncHttpClient/async-http-client" target="_blank" rel="noopener"><strong>AsyncHttpClient</strong></a>,这是一个异步的网络请求框架，使用它不必考虑线程的问题，其网络请求都在非 UI 线程中执行。还有就是 <a href="http://developer.android.com/intl/zh-cn/training/volley/index.html" target="_blank" rel="noopener"><strong>Volley</strong></a>，其优点在于处理小文件的 http 请求，在下载大文件的时候性能就比较糟糕了。最后是<a href="https://github.com/square/okhttp" target="_blank" rel="noopener"><strong>okhttp</strong></a>，它是Android版Http客户端。非常高效，支持SPDY、连接池、GZIP和 HTTP 缓存。还有今天的主角，<a href="http://square.github.io/retrofit/" target="_blank" rel="noopener"><strong>Retrofit</strong></a>。</p><a id="more"></a><h1 id="0x0-简介"><a href="#0x0-简介" class="headerlink" title="0x0 简介"></a>0x0 简介</h1><blockquote><p>A type-safe HTTP client for Android and Java</p></blockquote><p> 它是一个Square开发的类型安全的REST安卓客户端请求库。这个库为网络认证、API请求以及用OkHttp发送网络请求提供了强大的框架。</p><h1 id="0x1-设置"><a href="#0x1-设置" class="headerlink" title="0x1 设置"></a>0x1 设置</h1><p>在 module 的 Gradle 里添加<code>compile &#39;com.squareup.retrofit2:retrofit:2.0.2&#39;</code>，之后点击<em>Sync Now</em>同步即可。 如果你想让接收的字符串自动解析成自己想要的结果，还需要添加Converter。有如下可选:</p><ul><li><a href="https://github.com/google/gson" target="_blank" rel="noopener">Gson</a>: com.squareup.retrofit2:converter-gson</li><li><a href="http://wiki.fasterxml.com/JacksonHome" target="_blank" rel="noopener">Jackson</a>: com.squareup.retrofit2:converter-jackson</li><li><a href="https://github.com/square/moshi/" target="_blank" rel="noopener">Moshi</a>: com.squareup.retrofit2:converter-moshi</li><li><a href="https://developers.google.com/protocol-buffers/" target="_blank" rel="noopener">Protobuf</a>: com.squareup.retrofit2:converter-protobuf</li><li><a href="https://github.com/square/wire" target="_blank" rel="noopener">Wire</a>: com.squareup.retrofit2:converter-wire</li><li><a href="http://simple.sourceforge.net/" target="_blank" rel="noopener">Simple XML</a>: com.squareup.retrofit2:converter-simplexml</li><li>Scalars (primitives, boxed, and String): com.squareup.retrofit2:converter-scalars</li></ul><p>比如添加 Gson，需要在 Gradle 里添加<code>compile &#39;com.squareup.retrofit2:converter-gson:2.0.2&#39;</code></p><h1 id="0x2-使用"><a href="#0x2-使用" class="headerlink" title="0x2 使用"></a>0x2 使用</h1><p>我们以<a href="http://gank.io" target="_blank" rel="noopener">干货集中营</a>的 API 接口为例。比如获取10张<del>福利</del>照片的 api :<code>http://gank.io/api/data/福利/10/1</code></p><h2 id="1-配置"><a href="#1-配置" class="headerlink" title="1. 配置"></a>1. 配置</h2><p>在 module 的 Gradle 里添加依赖:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.retrofit2:retrofit:2.0.2'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.retrofit2:converter-gson:2.0.2'</span></span><br></pre></td></tr></table></figure></p><p>还要确定你在 <strong>AndroidMainfest.xml</strong> 中请求了网络权限:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="2-根据-json-生成-model"><a href="#2-根据-json-生成-model" class="headerlink" title="2. 根据 json 生成 model"></a>2. 根据 json 生成 model</h2><p>在这里安利一款 Android Studio 插件：<a href="https://github.com/zzz40500/GsonFormat" target="_blank" rel="noopener">GsonFormat</a>，它能够根据JSONObject格式的字符串,自动生成实体类参数.</p><p>打开API 的地址，能够看到 json 如下:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"results"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_id"</span>: <span class="string">"57105d6e67765974fbfcf8f4"</span>,</span><br><span class="line">      <span class="attr">"createdAt"</span>: <span class="string">"2016-04-15T11:18:06.529Z"</span>,</span><br><span class="line">      <span class="attr">"desc"</span>: <span class="string">"4.15"</span>,</span><br><span class="line">      <span class="attr">"publishedAt"</span>: <span class="string">"2016-04-15T13:04:43.738Z"</span>,</span><br><span class="line">      <span class="attr">"source"</span>: <span class="string">"chrome"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"\u798f\u5229"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"http://ww3.sinaimg.cn/large/7a8aed7bjw1f2x7vxkj0uj20d10mi42r.jpg"</span>,</span><br><span class="line">      <span class="attr">"used"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"who"</span>: <span class="string">"\u5f20\u6db5\u5b87"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用它生成的实体类如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;ResultsBean&gt; results;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isError</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setError</span><span class="params">(<span class="keyword">boolean</span> error)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.error = error;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ResultsBean&gt; <span class="title">getResults</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResults</span><span class="params">(List&lt;ResultsBean&gt; results)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.results = results;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultsBean</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String _id;</span><br><span class="line">        <span class="keyword">private</span> String createdAt;</span><br><span class="line">        <span class="keyword">private</span> String desc;</span><br><span class="line">        <span class="keyword">private</span> String publishedAt;</span><br><span class="line">        <span class="keyword">private</span> String source;</span><br><span class="line">        <span class="keyword">private</span> String type;</span><br><span class="line">        <span class="keyword">private</span> String url;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> used;</span><br><span class="line">        <span class="keyword">private</span> String who;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">get_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set_id</span><span class="params">(String _id)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>._id = _id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getCreatedAt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> createdAt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreatedAt</span><span class="params">(String createdAt)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.createdAt = createdAt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> desc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(String desc)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.desc = desc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getPublishedAt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> publishedAt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPublishedAt</span><span class="params">(String publishedAt)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.publishedAt = publishedAt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> source;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSource</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.source = source;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> type;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.type = type;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> url;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.url = url;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUsed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> used;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsed</span><span class="params">(<span class="keyword">boolean</span> used)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.used = used;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getWho</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> who;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWho</span><span class="params">(String who)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.who = who;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-新建一个接口"><a href="#3-新建一个接口" class="headerlink" title="3. 新建一个接口"></a>3. 新建一个接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GankIO</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GET</span>(<span class="string">"/api/data/&#123;type&#125;/500/1"</span>)</span><br><span class="line">    <span class="function">Call&lt;Model&gt; <span class="title">get</span><span class="params">(@Path(<span class="string">"type"</span>)</span> String type)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里@GET 使用 JAVA 注解，在运行时使用 JAVA的反射机制进行处理。</p><p><code>{type}</code> 为要获取的类型，可以在代码中指定为别的类型，具体可以查看 干货集中营的 api 文档说明。</p><h2 id="4-新建-Retrofit对象并进行网络请求"><a href="#4-新建-Retrofit对象并进行网络请求" class="headerlink" title="4. 新建 Retrofit对象并进行网络请求"></a>4. 新建 Retrofit对象并进行网络请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"http://gank.io"</span>;</span><br><span class="line"></span><br><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">           .baseUrl(URL)</span><br><span class="line">           .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">           .build();</span><br></pre></td></tr></table></figure><p>之后根据 <code>retrofit</code> 创建一个 <code>GankIO</code> 对象:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GankIO gankIO = retrofit.create(GankIO<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Call&lt;Model&gt; call = gankIO.get(<span class="string">"福利"</span>);</span><br></pre></td></tr></table></figure></p><p>然后可以进行网络请求了:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">call.enqueue(<span class="keyword">new</span> Callback&lt;Model&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;Model&gt; call, Response&lt;Model&gt; response)</span> </span>&#123;</span><br><span class="line">        Model model = response.body();</span><br><span class="line">        <span class="keyword">if</span> (!model.isError()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Model.ResultsBean url : model.getResults()) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onResponse: "</span> + url);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;Model&gt; call, Throwable t)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>就是这么简单轻松有木有！！！</p><h1 id="0x3-注解说明"><a href="#0x3-注解说明" class="headerlink" title="0x3 注解说明"></a>0x3 注解说明</h1><h2 id="1-GET"><a href="#1-GET" class="headerlink" title="1. @GET"></a>1. @GET</h2><p>向目的URL发送GET请求，其中可以包含String类型参数，该参数附加到主URL后面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"/api/data/Android/500/1"</span>)</span><br></pre></td></tr></table></figure><p>当参数中有<code>{}</code>花括号包含的字符串，表示需要使用<code>@Path</code>进行替换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"/api/data/&#123;type&#125;/500/1"</span>)</span><br><span class="line"><span class="function">Call&lt;Model&gt; <span class="title">get</span><span class="params">(@Path String type)</span></span>;</span><br><span class="line"><span class="comment">//之后在代码中使用如下调用</span></span><br><span class="line"> Call&lt;Model&gt; call = api.get(<span class="string">"Android"</span>);</span><br><span class="line"> <span class="comment">//即 /api/data/Android/500/1</span></span><br></pre></td></tr></table></figure><p>当目标URL形如<code>http://www.exapmle.com/list?page=1</code>时，这里就不能使用<code>@Path</code>了，需要使用查询参数<code>@Query</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@GET</span>(<span class="string">"/list"</span>)</span><br><span class="line"> <span class="function">Call&lt;ResponseBody&gt; <span class="title">list</span><span class="params">(@Query(<span class="string">"page"</span>)</span> <span class="keyword">int</span> page)</span>;</span><br><span class="line"> <span class="comment">//之后在代码中使用如下调用</span></span><br><span class="line"> Call&lt;ResponseBody&gt; call = api.list(<span class="number">1</span>);</span><br><span class="line"> <span class="comment">//即 /list?page=1</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//当查询为多个时</span></span><br><span class="line"> <span class="meta">@GET</span>(<span class="string">"/list"</span>)</span><br><span class="line"> <span class="function">Call&lt;ResponseBody&gt; <span class="title">list</span><span class="params">(@Query(<span class="string">"category"</span>)</span> String.. categories)</span>;</span><br><span class="line"> <span class="comment">//之后在代码中使用如下调用</span></span><br><span class="line"> Call&lt;ResponseBody&gt; call = api.list(<span class="string">"bar"</span>, <span class="string">"baz"</span>);</span><br><span class="line"> <span class="comment">//即 /list?category=bar&amp;category=baz</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//当为多组时</span></span><br><span class="line"><span class="meta">@GET</span>(<span class="string">"/list"</span>)</span><br><span class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">list</span><span class="params">(@Query(<span class="string">"username"</span>)</span> String username, @<span class="title">Query</span><span class="params">(<span class="string">"password"</span>)</span> String password)</span>;</span><br><span class="line"><span class="comment">//之后在代码中</span></span><br><span class="line">Call&lt;ResponseBody&gt; call = api.list(<span class="string">"admin"</span>, <span class="string">"123456"</span>);</span><br><span class="line"><span class="comment">//即 /list?username=admin&amp;password=123456</span></span><br></pre></td></tr></table></figure><p>当需要查询多个参数时，也可以使用<code>@QueryMap</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET(<span class="string">"/search"</span>)</span><br><span class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">list</span><span class="params">(@QueryMap Map&lt;String, String&gt; filters)</span></span>;</span><br><span class="line"><span class="comment">//---</span></span><br><span class="line">Call&lt;ResponseBody&gt; call = api.list(ImmutableMap.of(<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"kit"</span>, <span class="string">"kat"</span>));</span><br><span class="line"><span class="comment">//即 /serach?foo=bar&amp;kit=kat</span></span><br></pre></td></tr></table></figure><h1 id="0x04-Tips"><a href="#0x04-Tips" class="headerlink" title="0x04 Tips"></a>0x04 Tips</h1><h2 id="1-开启okhttp的log功能"><a href="#1-开启okhttp的log功能" class="headerlink" title="1. 开启okhttp的log功能"></a>1. 开启okhttp的log功能</h2><p>首先在APP的<code>build.gradle</code>中配置依赖:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.squareup.okhttp3:logging-interceptor:3.2.0'</span></span><br></pre></td></tr></table></figure><p>代码中做如下改动即可:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HttpLoggingInterceptor interceptor = <span class="keyword">new</span> HttpLoggingInterceptor();</span><br><span class="line">interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);</span><br><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder().addInterceptor(interceptor).build();</span><br><span class="line"></span><br><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .baseUrl(URL)</span><br><span class="line">                .client(client)</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure><p>Logcat如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">04-30 19:18:05.284 6638-6707/cn.imrhj.mydemo D/OkHttp: --&gt; GET http://www.games-cube.com/combat/api/login?username=xxxx&amp;password=xxxxx http/1.1</span><br><span class="line">04-30 19:18:05.284 6638-6707/cn.imrhj.mydemo D/OkHttp: --&gt; END GET</span><br><span class="line">04-30 19:18:05.342 6638-6707/cn.imrhj.mydemo D/OkHttp: &lt;-- 200 OK http://www.games-cube.com/combat/api/login?username=xxxx&amp;password=xxxx (58ms)</span><br><span class="line">04-30 19:18:05.342 6638-6707/cn.imrhj.mydemo D/OkHttp: Cache-Control: private</span><br><span class="line">04-30 19:18:05.342 6638-6707/cn.imrhj.mydemo D/OkHttp: Transfer-Encoding: chunked</span><br><span class="line">04-30 19:18:05.342 6638-6707/cn.imrhj.mydemo D/OkHttp: Content-Type: application/json; charset=utf-8</span><br><span class="line">04-30 19:18:05.342 6638-6707/cn.imrhj.mydemo D/OkHttp: Server: Microsoft-IIS/8.0</span><br><span class="line">04-30 19:18:05.342 6638-6707/cn.imrhj.mydemo D/OkHttp: Set-Cookie: ASP.NET_SessionId=e301ckyfpbzfbajkcepvnnu3; path=/; HttpOnly</span><br><span class="line">04-30 19:18:05.342 6638-6707/cn.imrhj.mydemo D/OkHttp: X-AspNetMvc-Version: 5.2</span><br><span class="line">04-30 19:18:05.342 6638-6707/cn.imrhj.mydemo D/OkHttp: X-AspNet-Version: 4.0.30319</span><br><span class="line">04-30 19:18:05.342 6638-6707/cn.imrhj.mydemo D/OkHttp: X-Powered-By: ASP.NET</span><br><span class="line">04-30 19:18:05.342 6638-6707/cn.imrhj.mydemo D/OkHttp: Date: Sat, 30 Apr 2016 11:18:05 GMT</span><br><span class="line">04-30 19:18:05.342 6638-6707/cn.imrhj.mydemo D/OkHttp: OkHttp-Sent-Millis: 1462015085317</span><br><span class="line">04-30 19:18:05.342 6638-6707/cn.imrhj.mydemo D/OkHttp: OkHttp-Received-Millis: 1462015085339</span><br><span class="line">04-30 19:18:05.343 6638-6707/cn.imrhj.mydemo D/OkHttp: &#123;&quot;key&quot;:&quot;f8716ab6-712a-4622-be5b-fd950326acb2&quot;,&quot;code&quot;:&quot;1&quot;&#125;</span><br><span class="line">04-30 19:18:05.343 6638-6707/cn.imrhj.mydemo D/OkHttp: &lt;-- END HTTP (57-byte body)</span><br><span class="line">04-30 19:18:05.350 6638-6638/cn.imrhj.mydemo D/MainAcitivty: onResponse: key:f8716ab6-712a-4622-be5b-fd950326acb2, code:1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/06/14/5d035d665a7e196570.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;平时在进行 Android 开发的时候，如果需要进行网络请求，一般都会选择使用&lt;strong&gt;HttpURLConnection&lt;/strong&gt; 和 &lt;strong&gt;HttpClient&lt;/strong&gt;。但是这两个用起来实在太过繁琐，需要设置一大堆，如果不封装的话，代码的复用率太低，所以就有了Android 的网络通信框架，比如 &lt;a href=&quot;https://github.com/AsyncHttpClient/async-http-client&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;AsyncHttpClient&lt;/strong&gt;&lt;/a&gt;,这是一个异步的网络请求框架，使用它不必考虑线程的问题，其网络请求都在非 UI 线程中执行。还有就是 &lt;a href=&quot;http://developer.android.com/intl/zh-cn/training/volley/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Volley&lt;/strong&gt;&lt;/a&gt;，其优点在于处理小文件的 http 请求，在下载大文件的时候性能就比较糟糕了。最后是&lt;a href=&quot;https://github.com/square/okhttp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;okhttp&lt;/strong&gt;&lt;/a&gt;，它是Android版Http客户端。非常高效，支持SPDY、连接池、GZIP和 HTTP 缓存。还有今天的主角，&lt;a href=&quot;http://square.github.io/retrofit/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Retrofit&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://imrhj.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://imrhj.cn/tags/Android/"/>
    
      <category term="Retrofit" scheme="https://imrhj.cn/tags/Retrofit/"/>
    
      <category term="Java" scheme="https://imrhj.cn/tags/Java/"/>
    
      <category term="网络请求" scheme="https://imrhj.cn/tags/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>将网站转到vps上做镜像存储</title>
    <link href="https://imrhj.cn/2016/use-github-webhook/"/>
    <id>https://imrhj.cn/2016/use-github-webhook/</id>
    <published>2016-04-09T08:55:29.000Z</published>
    <updated>2021-03-31T02:49:29.048Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/06/14/5d03981e83eea35252.png" alt="1560516636183.png"></p><blockquote><p>由于Github Page这两天间歇性抽风，因此打算将Hexo在我的腾讯云服务器上做一份镜像存储。考虑到每次更新博文都要手动传上去太麻烦，最开始打算使用Travis CI在自动部署的时候同时向我的VPS上传输一份文件镜像，但是这样的话需要使用ftps,Travis CI上还要为私匙加密。折腾起来太麻烦。</p></blockquote><a id="more"></a><blockquote><p>google一番发现了<a href="https://developer.github.com/webhooks/" target="_blank" rel="noopener">Github Webhook</a>，我可以设定当每次执行gitpush的时候，github向指定服务器发送请求，然后我在服务器端监听这个请求，来判断如果push来自master分支，那么就在服务器端调用<code>git fetch origin master</code>来进行更新服务器端代码，以此实现镜像存储的自动部署。</p></blockquote><h1 id="1-在github上设置webhook"><a href="#1-在github上设置webhook" class="headerlink" title="1. 在github上设置webhook"></a>1. 在github上设置webhook</h1><p>打开你的项目，选择Settings-&gt;Webhooks &amp; services-&gt;Add webhook，在这个页面添加一个webhook。如图所示。<br><img src="https://i.loli.net/2019/06/14/5d0398441874465489.png" alt=""></p><ul><li><strong>Payload URL</strong>: 在此输入服务器地址，比如我的是<a href="http://imrhj.tk:7777" target="_blank" rel="noopener">http://imrhj.tk:7777</a></li><li><strong>Content type</strong>: 这一项保持默认不要动，因为我们接下来要用到<code>github-webhook-handler</code>去监听Gtihub发送到服务器上的请求，而<code>github-webhook-handler</code>智能解析json数据。<del>当然如果你要自己实现服务端监听的话，当我没说</del></li><li><strong>Secret</strong>: 密匙信息，建议输入一段随机字符串。用来进行身份鉴别，防止别人恶意向你的服务器发送请求。在接下来服务器端要用到。</li></ul><p>点击<strong>Update webhook</strong>即可添加。添加完成后Github会发送一条请求检测配置是否成功，因为服务器端还未配置，所以请求会失败。接下来配置完服务器端刷新即可。</p><h1 id="2-服务器端配置"><a href="#2-服务器端配置" class="headerlink" title="2. 服务器端配置"></a>2. 服务器端配置</h1><p>在这里如果不想<del>其实是懒</del>自己撸一个轮子，可以使用<a href="https://github.com/rvagg/github-webhook-handler" target="_blank" rel="noopener">github-webhook-handler</a>来进行服务端的处理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g github-webhook-handler</span><br></pre></td></tr></table></figure></p><p>接下来是监听程序listener.js <em>这里就用到了刚刚设置的Secret</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">var</span> createHandler = <span class="built_in">require</span>(<span class="string">'github-webhook-handler'</span>)</span><br><span class="line"><span class="keyword">var</span> handler = createHandler(&#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">secret</span>: <span class="string">'我刚刚设置的secret'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run_cmd</span>(<span class="params">cmd, args, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).spawn;</span><br><span class="line">  <span class="keyword">var</span> child = spawn(cmd, args);</span><br><span class="line">  <span class="keyword">var</span> resp = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">  child.stdout.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">buffer</span>) </span>&#123; resp += buffer.toString(); &#125;);</span><br><span class="line">  child.stdout.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; callback (resp) &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  handler(req, res, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    res.statusCode = <span class="number">404</span></span><br><span class="line">    res.end(<span class="string">'no such location'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).listen(<span class="number">7777</span>)</span><br><span class="line"></span><br><span class="line">handler.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'Error:'</span>, err.message);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">handler.on(<span class="string">'push'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Received a push event for %s to %s'</span>,</span><br><span class="line">    event.payload.repository.name,</span><br><span class="line">    event.payload.ref);</span><br><span class="line">  <span class="keyword">if</span> (event.payload.ref == <span class="string">'refs/heads/master'</span>) &#123;</span><br><span class="line">    run_cmd(<span class="string">'sh'</span>, [<span class="string">'./git.sh'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123; <span class="built_in">console</span>.log(text) &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在这里当收到github发送来的请求，检测头里包含的信息是否为<code>refs/heads/master</code>，匹配上之后，执行同目录下的<code>git.sh</code>更新网站信息。<br>下面是<code>git.sh</code>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/nginx/html</span><br><span class="line">git fetch origin master</span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure></p><p>enjoy it~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/06/14/5d03981e83eea35252.png&quot; alt=&quot;1560516636183.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于Github Page这两天间歇性抽风，因此打算将Hexo在我的腾讯云服务器上做一份镜像存储。考虑到每次更新博文都要手动传上去太麻烦，最开始打算使用Travis CI在自动部署的时候同时向我的VPS上传输一份文件镜像，但是这样的话需要使用ftps,Travis CI上还要为私匙加密。折腾起来太麻烦。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="https://imrhj.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Hexo" scheme="https://imrhj.cn/tags/Hexo/"/>
    
      <category term="vps" scheme="https://imrhj.cn/tags/vps/"/>
    
      <category term="Github webhook" scheme="https://imrhj.cn/tags/Github-webhook/"/>
    
  </entry>
  
  <entry>
    <title>打开Mac OS X原生NTFS功能</title>
    <link href="https://imrhj.cn/2016/open-os-x-ntfs/"/>
    <id>https://imrhj.cn/2016/open-os-x-ntfs/</id>
    <published>2016-04-08T02:48:43.000Z</published>
    <updated>2021-03-31T02:49:29.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>在使用OS X时，很多人都遇到了NTFS格式分区写入问题。<br>第一种方法是使用第三方工具，诸如Paragon NTFS for MAC.虽然使用起来很简单，但是这个工具是收费的，而且用起来感觉不太稳定。<br>其实在10.5的时候，OS X就支持直接写入NTFS分区的，只是后来由于微软限制，这个功能被屏蔽了。<br>现在我们通过命令手动打开它</p></blockquote><h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><p>打开<strong>磁盘工具</strong>，找到你的NTFS分区，点击简介，记录下该盘的<strong>UUID</strong>。<br><img src="https://i.loli.net/2019/06/14/5d035d21eec7517228.png" alt=""></p><p>可以看到，我的磁盘的<strong>UUID</strong>是<code>7AFE520E-E3A3-46CA-A971-7AC7D5B55331</code></p><h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><p>编辑/etc/fstab文件<br><code>sudo vim /etc/fstab</code><br>写入以下内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID=7AFE520E-E3A3-46CA-A971-7AC7D5B55331 none ntfs rw,auto,nobrowse</span><br></pre></td></tr></table></figure></p><p>最后一个*<em>unbrowse</em>很重要，因为这个代表了在finder里不显示这个分区，这个选项非常重要，如果不打开的话挂载是不会成功的。<br>之后重启电脑就能识别，如果是移动硬盘，重新拔插就可以了。<br>但是有个很大的问题，这个分区在finder中不显示了，这里建议使用软连接将/Values目录链接到用户目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s /Volumes ~/Volumes</span><br></pre></td></tr></table></figure><p>之后点开用户目录就能找到磁盘了。</p><p><del>用这种方法打开的是系统原生的ntfs功能，稳定实用，比第三方工具要好用的多了。</del></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在使用OS X时，很多人都遇到了NTFS格式分区写入问题。&lt;br&gt;第一种方法是使用第三方工具，诸如Paragon 
      
    
    </summary>
    
      <category term="技巧" scheme="https://imrhj.cn/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="OS X" scheme="https://imrhj.cn/tags/OS-X/"/>
    
      <category term="NTFS" scheme="https://imrhj.cn/tags/NTFS/"/>
    
  </entry>
  
  <entry>
    <title>将博客从WordPress迁移到Hexo</title>
    <link href="https://imrhj.cn/2016/use-hexo-blog/"/>
    <id>https://imrhj.cn/2016/use-hexo-blog/</id>
    <published>2016-04-06T12:44:25.000Z</published>
    <updated>2021-03-31T02:49:29.048Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/06/14/5d039861a161221107.png" alt="1560516703395.png"></p><p>一直想去学习markdown的使用，最近发现了一个静态博客<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>很好用，趁着最近清闲下来，学着将博客转移到hexo上,使用静态页面。</p><a id="more"></a><h1 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h1><p><del>请参照<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方教程</a></del></p><h1 id="使用Travis-CI自动部署"><a href="#使用Travis-CI自动部署" class="headerlink" title="使用Travis CI自动部署"></a>使用Travis CI自动部署</h1><p>在使用的时候，发现每次写完文章都要手动推送到github,之后在使用hexo g -d进行部署，比较繁琐，因此发现了一个用于<del>装逼</del>自动构建的网站<a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI</a>，这个网站是免费网站，目前Github上的绝大多数项目都已经移入到Travis CI的构建队列中。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><blockquote><p>一个github帐号</p></blockquote><blockquote><p>一台电脑<del>(Linux/Uinx更佳)</del></p></blockquote><blockquote><p>一个Travis CI帐号</p></blockquote><h2 id="建立-travis-yml文件"><a href="#建立-travis-yml文件" class="headerlink" title="建立.travis.yml文件"></a>建立.travis.yml文件</h2><ul><li>什么是.travis.yml文件？</li><li>简单来说，Travis CI通过Docker自动部署一个虚拟化平台，在上面安装一系列软件环境来模拟你的编译环境，这个文件就是来高数Travis CI怎么去构建这个环境。直接贴出来我的</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> language: node_js</span><br><span class="line">sudo: <span class="literal">false</span></span><br><span class="line">node_js:</span><br><span class="line">- stable</span><br><span class="line">before_install:</span><br><span class="line">- openssl aes-256-cbc -K <span class="variable">$encrypted_8926b8c4a31e_key</span> -iv <span class="variable">$encrypted_8926b8c4a31e_iv</span></span><br><span class="line">  -<span class="keyword">in</span> ssh_key.enc -out ~/.ssh/id_rsa -d</span><br><span class="line">- chmod 600 ~/.ssh/id_rsa</span><br><span class="line">- <span class="built_in">eval</span> $(ssh-agent)</span><br><span class="line">- ssh-add ~/.ssh/id_rsa</span><br><span class="line">- cp ssh_config ~/.ssh/config</span><br><span class="line">- npm install hexo-cli -g</span><br><span class="line">script:</span><br><span class="line">- hexo clean</span><br><span class="line">- hexo generate</span><br><span class="line">- <span class="built_in">cd</span> public</span><br><span class="line">- git init</span><br><span class="line">- git config user.name <span class="string">"ahjsrhj"</span></span><br><span class="line">- git config user.email aha199277@qq.com</span><br><span class="line">- git add .</span><br><span class="line">- git commit -m <span class="string">"Update docs"</span></span><br><span class="line">- git remote add origin git@github.com:ahjsrhj/ahjsrhj.github.io.git</span><br><span class="line">- git push -f origin master</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - blog</span><br></pre></td></tr></table></figure><p>注意其中的<code>openssl aes-256-cbc -K $encrypted_8926b8c4a31e_key -iv $encrypted_8926b8c4a31e_iv</code>这一行不要套用，应替换为自己的。在使用的时候先删除这一行和下面一行，其中部分信息修改为自己的。</p><h2 id="生成Deploy-Key"><a href="#生成Deploy-Key" class="headerlink" title="生成Deploy Key"></a>生成Deploy Key</h2><ol><li>使用<code>ssh-key</code>制作一个 SSH key <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure></li></ol><p>生成过程中把passphrase留空。</p><ol start="2"><li><p>添加Key 到repo中</p><p> 生成之后把public key里的信息复制到你的repo的<code>Deploy keys</code>那里，如下。</p></li></ol><p><img src="https://i.loli.net/2019/06/14/5d0398755786b47960.png" alt="1560516722159.png"><br>    不应该添加到账户的<code>SSH and GPG keys</code>，这样能够限制key的权限只在当前项目。</p><h2 id="加密Deploy-Key"><a href="#加密Deploy-Key" class="headerlink" title="加密Deploy Key"></a>加密Deploy Key</h2><ol><li>安装Travis命令行工具，并登录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gem install travis</span><br><span class="line">$ travis login --auto</span><br></pre></td></tr></table></figure></li></ol><p>在登录时可能需要你的github帐号信息。</p><ol start="2"><li>加密<br>将刚刚生成的ssh_key复制到hexo blog根目录,在blog目录下执行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ travis encrypt-file ssh_key --add</span><br></pre></td></tr></table></figure></li></ol><p>若是提示找不到repo,使用<code>r</code>指令手动指定repo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ travis encrypt-file ssh_key --add -r ahjsrhj/ahjsrhj.github.io</span><br></pre></td></tr></table></figure></p><p>之后Travis CI网站上对应repo设置里能看到两个值，同时你的.travis.yml文件中应该自动出现了一句类似这样的代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- openssl aes-256-cbc -K <span class="variable">$encrypted_8926b8c4a31e_key</span> -iv <span class="variable">$encrypted_8926b8c4a31e_iv</span></span><br><span class="line">  -<span class="keyword">in</span> ssh_key.enc -out ~/.ssh/id_rsa -d</span><br></pre></td></tr></table></figure></p><p>确保能将解密获得的key命名为id_rsa并放在<code>~/.ssh/</code>下面。之后将<strong>ssh_key</strong>删除</p><h2 id="设置SSH并同步"><a href="#设置SSH并同步" class="headerlink" title="设置SSH并同步"></a>设置SSH并同步</h2><p>再根目录建立<code>ssh_config</code>文件，设置Travis上的SSH<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  User git</span><br><span class="line">  StrictHostKeyChecking no</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br><span class="line">  IdentitiesOnly yes</span><br></pre></td></tr></table></figure></p><p>之后设定便结束了,将代码同步到github，静等一分钟，enjoy it~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/06/14/5d039861a161221107.png&quot; alt=&quot;1560516703395.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;一直想去学习markdown的使用，最近发现了一个静态博客&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;很好用，趁着最近清闲下来，学着将博客转移到hexo上,使用静态页面。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://imrhj.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Hexo" scheme="https://imrhj.cn/tags/Hexo/"/>
    
      <category term="Travis CI" scheme="https://imrhj.cn/tags/Travis-CI/"/>
    
  </entry>
  
</feed>
